<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cross Dominant</title>
    <link>http://conoroneill.net/</link>
    <description>Recent content on Cross Dominant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Feb 2016 17:43:26 +0000</lastBuildDate>
    <atom:link href="http://conoroneill.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Three ways to build Go 1.4 binaries for MIPS32 Onion Omega #golang #docker</title>
      <link>http://conoroneill.net/three-ways-to-build-go-14-binaries-for-mips32-onion-omega-golang/</link>
      <pubDate>Mon, 08 Feb 2016 17:43:26 +0000</pubDate>
      
      <guid>http://conoroneill.net/three-ways-to-build-go-14-binaries-for-mips32-onion-omega-golang/</guid>
      <description>

&lt;p&gt;I previously &lt;a href=&#34;http://conoroneill.net/onion-omega-first-impressions-running-golang-nodejs/&#34;&gt;wrote about using gccgo&lt;/a&gt; to build Go binaries for the &lt;a href=&#34;https://onion.io/&#34;&gt;Onion Omega&lt;/a&gt; due to Go&amp;rsquo;s lack of support for MIPS CPUs. But TBH it&amp;rsquo;s a pain in the butt. Things were looking up when it was revealed that Go 1.6 would have MIPS support but sadly it&amp;rsquo;s for MIPS64 only, for datacenter applications I guess.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2016/02/onion_omega_small.jpg&#34; alt=&#34;Onion Omega&#34; /&gt;&lt;/p&gt;

&lt;p&gt;However &lt;a href=&#34;https://twitter.com/onetruecathal&#34;&gt;Cathal Garvey&lt;/a&gt; discovered a &lt;a href=&#34;https://github.com/gomini/go-mips32&#34;&gt;GitHub repo&lt;/a&gt; where some lovely person has ported v1.4.2 of Go to MIPS32 and it works perfectly on the Onion Omega (and presumably all other Atheros AR9331 boards).&lt;/p&gt;

&lt;p&gt;This is a huge jump forward for the Onion Omega. Language support has been a bit of a problem for me with both Node.js and Go not really being usable there until now.&lt;/p&gt;

&lt;p&gt;Due to the lack of storage on the Omega, you won&amp;rsquo;t be able to install the full Go build system there so a cross-compilation setup is needed.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been able to build the binaries on Linux, Windows and in a Docker container. All are easy.&lt;/p&gt;

&lt;h1 id=&#34;linux-or-linux-vm-on-windows:d02f86b4d8f79af4cbc61b2378ee241c&#34;&gt;Linux (or Linux VM on Windows)&lt;/h1&gt;

&lt;p&gt;Following &lt;a href=&#34;http://www.black-swift.com/forum/suggestion-box/59-go-1-4-2-on-black-swift&#34;&gt;Cathal&amp;rsquo;s simple instructions&lt;/a&gt;, I was able to build Go for MIPS32 in a few minutes in a Linux VM on my main Windows machine. I then cross-compiled a Hello World and scp&amp;rsquo;ed it to the Omega. It worked first time!&lt;/p&gt;

&lt;p&gt;My steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd
git clone https://github.com/gomini/go-mips32.git
cd go-mips32/src
export GOOS=linux
export GOARCH=mips32
sudo mkdir /opt/mipsgo
./make.bash
cd ..
sudo cp -R * /opt/mipsgo
export GOROOT=/opt/mipsgo
export PATH=/opt/mipsgo/bin:$PATH
vi helloworld.go
go build helloworld.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;windows-10:d02f86b4d8f79af4cbc61b2378ee241c&#34;&gt;Windows 10&lt;/h1&gt;

&lt;p&gt;I was very surprised this worked but of course Go is strongly cross-platform. My standard build setup for Node.js native modules did the trick. You&amp;rsquo;ll probably need Visual Studio Community 2015 and Git for Windows. Then:&lt;/p&gt;

&lt;p&gt;Open a CMD prompt (note I have all my code on D: drive)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;d:
cd gitwork
git clone https://github.com/gomini/go-mips32.git
cd go-mips32\src
set GOOS=linux
set GOARCH=mips32
make.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then created a simple CMD file which sets everything up when I need to build for MIPS so it doesn&amp;rsquo;t interfere with my main Go install.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;set GOOS=linux
set GOARCH=mips32
set GOROOT=d:\gitwork\go-mips32
set GOPATH=d:\gitwork\go
set PATH=d:\gitwork\go-mips32\bin;%PATH%
CMD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I launch that, I can do the usual go build filename.go. Note that the MIPS port seems to be able to share the same GOPATH as my x86-64 one. Not sure that will work in every case tho e.g. If C modules are bound?&lt;/p&gt;

&lt;p&gt;For Windows I use WinSCP to copy the files to the Omega. For some reason Filezilla SFTP has a problem talking to it.&lt;/p&gt;

&lt;h1 id=&#34;docker-container-on-windows:d02f86b4d8f79af4cbc61b2378ee241c&#34;&gt;Docker Container on Windows&lt;/h1&gt;

&lt;h2 id=&#34;hello-world:d02f86b4d8f79af4cbc61b2378ee241c&#34;&gt;Hello World&lt;/h2&gt;

&lt;p&gt;To get more familiar with Docker I decided to create a Docker image that others can use. That turned out to be pretty easy too. Here is the Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine:3.3

ENV GOLANG_VERSION 1.4.2
ENV GOLANG_SRC_URL https://github.com/gomini/go-mips32.git
ENV GOOS linux
ENV GOARCH mips32
ENV GOROOT /usr/local/go

RUN set -ex \
	&amp;amp;&amp;amp; apk add --no-cache --virtual .build-deps \
		bash \
    git \
    file \
		ca-certificates \
		gcc \
		musl-dev \
		openssl \
    openssh \
	\
  &amp;amp;&amp;amp; cd /usr/local/ \
	&amp;amp;&amp;amp; git clone &amp;quot;$GOLANG_SRC_URL&amp;quot; go \
	&amp;amp;&amp;amp; cd /usr/local/go/src \
	&amp;amp;&amp;amp; ./make.bash \
	\
	&amp;amp;&amp;amp; apk del .build-deps

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN rm -rf &amp;quot;$GOROOT/src&amp;quot;
RUN rm -rf &amp;quot;$GOROOT/test&amp;quot;
RUN rm -rf &amp;quot;$GOROOT/doc&amp;quot;
RUN mkdir -p &amp;quot;$GOPATH/src&amp;quot; &amp;quot;$GOPATH/pkg&amp;quot; &amp;quot;$GOPATH/bin&amp;quot; &amp;amp;&amp;amp; chmod -R 777 &amp;quot;$GOPATH&amp;quot;
WORKDIR $GOPATH/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can grab the image from &lt;a href=&#34;https://hub.docker.com/r/conoro/go-mips32/&#34;&gt;Docker Hub here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The full set of steps for Windows are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/products/docker-toolbox&#34;&gt;Docker Toolbox for Windows&lt;/a&gt;. It&amp;rsquo;ll also install VirtualBox if you don&amp;rsquo;t already have it.&lt;/li&gt;
&lt;li&gt;Run a Docker shell and type:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker run -t -i conoro/go-mips32:v1 /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note v2 has some problems I need to fix so you&amp;rsquo;ll need to manually install openssh and git)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;ll now be at a Linux prompt and you can type:   &lt;em&gt;go version&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Then create a Hello World using:    &lt;em&gt;vi helloworld.go&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	fmt.Println(&amp;quot;Hello, Conor&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Compile it with:   &lt;em&gt;go build helloworld.go&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Copy it to the Onion Omega with:     &lt;em&gt;scp helloworld root@ip-of-your-onion/helloworld&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Open a shell on your Omega with the webapp or Putty and just type:   &lt;em&gt;helloworld&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;web-app:d02f86b4d8f79af4cbc61b2378ee241c&#34;&gt;Web App&lt;/h2&gt;

&lt;p&gt;A more advanced example which also works perfectly is to run a web-app using the &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt; framework. For that, all you need to do is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/gin-gonic/gin
vi gintest.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then in vi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;github.com/gin-gonic/gin&amp;quot;

func main() {
    r := gin.Default()
    r.GET(&amp;quot;/ping&amp;quot;, func(c *gin.Context) {
        c.JSON(200, gin.H{
            &amp;quot;message&amp;quot;: &amp;quot;pong&amp;quot;,
        })
    })
    r.Run() // listen and server on 0.0.0.0:8080
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then build that, scp it to the Omega and run it. Then open &lt;a href=&#34;http://ip-of-your-onion:8080/ping&#34;&gt;http://ip-of-your-onion:8080/ping&lt;/a&gt; to see everything working nicely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2016/02/gin_ping_omega.jpg&#34; alt=&#34;Gin Ping Onion Omega&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note I also built this using the Windows setup for comparison and it worked too.&lt;/p&gt;

&lt;h2 id=&#34;database:d02f86b4d8f79af4cbc61b2378ee241c&#34;&gt;Database&lt;/h2&gt;

&lt;p&gt;Not so much luck with embedded databases I&amp;rsquo;m afraid. I&amp;rsquo;ll have to stick to JSON files only (or try &lt;a href=&#34;https://github.com/cznic/kv&#34;&gt;kv&lt;/a&gt;, &lt;a href=&#34;https://github.com/peterbourgon/diskv&#34;&gt;diskv&lt;/a&gt;, &lt;a href=&#34;https://github.com/steveyen/gkvlite&#34;&gt;gkvlite&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/boltdb/bolt&#34;&gt;Bolt&lt;/a&gt; has some native code which isn&amp;rsquo;t available on MIPS32 so it won&amp;rsquo;t compile. Otherwise I&amp;rsquo;m using this on another project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34;&gt;go-sqlite3&lt;/a&gt; has a C library dependency so it also won&amp;rsquo;t cross-compile.&lt;/li&gt;
&lt;li&gt;I gave up trying to get &lt;a href=&#34;https://github.com/cznic/ql&#34;&gt;ql&lt;/a&gt; to do anything, even on Windows and Linux. It doesn&amp;rsquo;t like standard SQL syntax and I ran out of patience with the lack of example code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/HouzuoGuo/tiedot&#34;&gt;tiedot&lt;/a&gt; generates a large number of massive files which the Onion wouldn&amp;rsquo;t be able to handle. If I can get it down to LevelDB sizes, I might retry. Actually it doesn&amp;rsquo;t like 32-bit systems so forget that.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/syndtr/goleveldb&#34;&gt;goleveldb&lt;/a&gt; looked like it would be perfect but it crashes trying to open a DB it created on the Onion. I have a feeling this is a bug in the MIPS32 port of Go. The crash happens in the Snappy library from what I can see. It can create an empty DB. it can read an empty DB but it crashes on a DB that has entries whether the DB was created on the Onion or on Windows. Anyway, here&amp;rsquo;s the code which crashes if you want to try it out yourself:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/syndtr/goleveldb/leveldb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then in vi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/syndtr/goleveldb/leveldb&amp;quot;
)

func main() {
	db, _ := leveldb.OpenFile(&amp;quot;./leveltest.db&amp;quot;, nil)
	defer db.Close()
	data, err := db.Get([]byte(&amp;quot;keyyeah&amp;quot;), nil)
	if err == leveldb.ErrNotFound {
		_ = db.Put([]byte(&amp;quot;keyyeah&amp;quot;), []byte(&amp;quot;valueyeah&amp;quot;), nil)
		fmt.Println(&amp;quot;Inserted Key/Value&amp;quot;)
	}
	data, _ = db.Get([]byte(&amp;quot;keyyeah&amp;quot;), nil)
	fmt.Println(string(data))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion:d02f86b4d8f79af4cbc61b2378ee241c&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to running a lot more code on the Omega now.&lt;/p&gt;

&lt;p&gt;Next step with the Dockerfile is to add some shared directories so I can develop in the main OS and just use Docker for the compilation piece.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When will Car Insurance Monitoring Apps become mandatory? 5yrs?</title>
      <link>http://conoroneill.net/when-will-car-insurance-monitoring-apps-become-mandatory/</link>
      <pubDate>Sat, 02 Jan 2016 13:00:29 +0000</pubDate>
      
      <guid>http://conoroneill.net/when-will-car-insurance-monitoring-apps-become-mandatory/</guid>
      <description>

&lt;p&gt;My Car Insurance Broker, 123.ie just offered me up to 10% off my 2016 premium if I installed a driving monitoring app on my phone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ia801809.us.archive.org/32/items/Orwell1984preywo/orwell1984preywo.pdf&#34;&gt;No thanks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But when does it go from &amp;ldquo;get a discount&amp;rdquo; to &amp;ldquo;we won&amp;rsquo;t insure you unless you install this app&amp;rdquo;?&lt;/p&gt;

&lt;h2 id=&#34;the-email:e2b6c4ebc89eb12d3dc2d0642245ebc1&#34;&gt;The email:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2016/01/123discount.jpg&#34; alt=&#34;123 Discount&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How cheaply can you build a full Raspberry #PiZero computer?</title>
      <link>http://conoroneill.net/how-cheaply-can-you-do-a-full-pi-zero-computer/</link>
      <pubDate>Fri, 01 Jan 2016 10:59:32 +0000</pubDate>
      
      <guid>http://conoroneill.net/how-cheaply-can-you-do-a-full-pi-zero-computer/</guid>
      <description>&lt;p&gt;When the incredible &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;$5 Pi Zero was launched&lt;/a&gt;, the usual suspects were so busy snarking how it wasn&amp;rsquo;t really $5, that they completely missed what an important moment in computer history this is. You know the type. The ones who would have ridiculed Tim Berners-Lee&amp;rsquo;s design for the web. Or would have told Linus in no uncertain terms that he was misguided and that microkernels were the future.&lt;/p&gt;

&lt;p&gt;Whilst you can&amp;rsquo;t turn on a #PiZero for $5, you also can&amp;rsquo;t connect to the LAN with your $1500 Macbook Pro without buying an adapter.&lt;/p&gt;

&lt;p&gt;So assuming we don&amp;rsquo;t factor in electricity costs, carbon credits and depreciation on your chair, how cheaply can you build a fully functioning Raspberry Pi Zero, living in the UK?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://swag.raspberrypi.org/collections/pi-zero/products/pi-zero&#34;&gt;Pi Zero&lt;/a&gt; £4 + £3 shipping&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ebay.ie/itm/USB-2-0-High-Speed-4-Port-Power-On-Off-Switch-LED-Hub-for-PC-Laptop-Notebook-HC-/281721438658?hash=item4197e801c2:g:T8sAAOSwKrhVe~h~&#34;&gt;Powered USB Hub&lt;/a&gt; £1.48&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ebay.ie/itm/New-Micro-USB-Male-to-Female-OTG-Cable-Adapter-for-Mobile-Cell-Phone-/301681189117?hash=item463d99a0fd:g:AtgAAOSwu4BVmnrL&#34;&gt;USB OTG adapter&lt;/a&gt; £1.10&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aliexpress.com/item/Mini-2-4G-150Mbps-USB-WiFi-Adapter-802-11-b-g-n-Wi-Fi-Dongle-computer/32349764969.html&#34;&gt;Wifi Adapter&lt;/a&gt; - £1.25&lt;/li&gt;
&lt;li&gt;Power Supply - Either spare phone charger or &lt;a href=&#34;http://www.aliexpress.com/item/white-1set-Dual-2A-USB-EU-Plug-Wall-Charger-micro-USB-cable-for-Samsung-galaxy-S4/32337450240.html?ws_ab_test=searchweb201556_3,searchweb201644_1_79_78_77_82_80_62_81,searchweb201560_6&#34;&gt;anything like this&lt;/a&gt; £2.05&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aliexpress.com/item/Hot-2Pcs-USB-2-0-to-DC-3-5mm-Barrel-Connector-Jack-Power-Cable-5v-For/32219412146.html&#34;&gt;USB to Power converter&lt;/a&gt; - 62p&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/gp/offer-listing/B0162YQEIE&#34;&gt;SD Card&lt;/a&gt; - 16GB Class 10 MicroSD + Adapter - £3.95&lt;/li&gt;
&lt;li&gt;Keyboard and Mouse - Any recycling centre for free. Or if you really can&amp;rsquo;t beg borrow or steal one. &lt;a href=&#34;http://www.aliexpress.com/item/Modern-Design-Pure-White-Ultra-Thin-Design-2-4GHz-Wireless-Keyboard-Cover-Mouse-Kit-for-Desktop/32325530848.html?ws_ab_test=searchweb201556_3,searchweb201644_1_79_78_77_82_80_62_81,searchweb201560_6&#34;&gt;This is&lt;/a&gt; £10.26&lt;/li&gt;
&lt;li&gt;Mini-HDMI cable/adapter - &lt;a href=&#34;http://www.aliexpress.com/item/High-quality-1-5M-1-4-Version-mini-HDMI-male-cable-to-hdmi-cable-for-tablet/1509136887.html?ws_ab_test=searchweb201556_3,searchweb201644_1_79_78_77_82_80_62_81,searchweb201560_6&#34;&gt;Cable&lt;/a&gt; = £1.30 or &lt;a href=&#34;http://www.aliexpress.com/item/2pcs-set-HDMI-to-Mini-HDMI-to-Micro-HDMI-Adapter-Male-to-Female-Converter-for-Xbox/2048848371.html?ws_ab_test=searchweb201556_3,searchweb201644_1_79_78_77_82_80_62_81,searchweb201560_6&#34;&gt;Adapter&lt;/a&gt; = 97p&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Total: £29.01&lt;/p&gt;

&lt;p&gt;Or with obvious re-use/borrowing of stuff: £16.70&lt;/p&gt;

&lt;p&gt;In Ireland? Add £1 extra for shipping the Pi Zero. Possibly a bit for the SD card from Amazon. Everything else free P&amp;amp;P from China.&lt;/p&gt;

&lt;p&gt;Do you need a screen? Yup. Now walk into the sitting room and see if you can spot one. Well done.&lt;/p&gt;

&lt;p&gt;A £29 fully fitted-out computer, that you could build the next global webapp on, remains completely revolutionary. All for around the same price as an Apple Thunderbolt-to-Ethernet adapter :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2016/01/quacked_the_case.gif&#34; alt=&#34;You&#39;ve Quacked the case&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What excited Conor in tech in 2015?</title>
      <link>http://conoroneill.net/what-excited-me-in-tech-in-2015/</link>
      <pubDate>Thu, 31 Dec 2015 21:20:12 +0000</pubDate>
      
      <guid>http://conoroneill.net/what-excited-me-in-tech-in-2015/</guid>
      <description>

&lt;p&gt;A completely random braindump of stuff that got my juices flowing this year.&lt;/p&gt;

&lt;h1 id=&#34;esp8266-1-wifi-modules:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;ESP8266 $1 Wifi modules&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve talked about &lt;a href=&#34;http://espressif.com/en/products/esp8266/&#34;&gt;the ESP8266&lt;/a&gt; constantly all year. A price-point of ~$1 in volume means that you can wifi-enable anything. Where previously you might have used one of the many low bandwidth &amp;ldquo;IoT&amp;rdquo; protocols internally and connected them to hub-device, now you can do Wifi and IP end-to-end. The only downside is high power consumption. I&amp;rsquo;d actually prefer if they did a low-power V2 instead of the bells-and-whistles ESP32.&lt;/p&gt;

&lt;p&gt;The number of projects and initiatives that have grown up around ESP8266 is impossible to keep track of. Ones to check out are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nodemcu.com/index_en.html&#34;&gt;NodeMCU&lt;/a&gt; - A really nice &lt;a href=&#34;http://www.electrodragon.com/product/nodemcu-lua-amica-r2-esp8266-wifi-board/&#34;&gt;dev board&lt;/a&gt; and Lua-based stack. This is what I used for most of this year but will be switching to &lt;a href=&#34;http://www.espruino.com/&#34;&gt;Espruino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tve/EspruinoDocs/blob/master/boards/EspruinoESP8266.md&#34;&gt;Espruino on ESP8266&lt;/a&gt; - Still in heavy development but feels like a complete winner. JavaScript + Wifi for $4 is a killer solution.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cesanta.com/esp8266-and-iot-smartjs-starter-guide&#34;&gt;Cesanta Smart.js&lt;/a&gt; - A Dublin-based company. Ex-Googlers I think. Similar to Espruino but without the community. Wish they&amp;rsquo;d join forces instead.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/esp8266/Arduino/&#34;&gt;Arduino&lt;/a&gt; - Yup, you can run a huge amount of Arduino code straight on the ESP8266. Really exciting to have this. Only drawback is that native AVR code and (I think) interrupt-driven code will not compile. Also far fewer IOs than normal Arduinos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;raspberry-pi-zero-and-the-mag-pi-issue-40:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Raspberry Pi Zero and The Mag Pi Issue 40&lt;/h1&gt;

&lt;p&gt;A &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;$5 computer&lt;/a&gt; that came free on the front of a magazine. Very little else needs to be said here. $5 for 1GHz, 512MB RAM, 1080p HDMI, Linux, Mathematica, Node-Red, Kodi and anything else you want to try. I still get the shivers thinking about it. Meanwhile the never-satisfieds will whine about $1 adapters or the fact that it needs electricity. I&amp;rsquo;m framing my first one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/raspberry-pi-zero-_3510859b.jpg&#34; alt=&#34;PiZero&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;let-s-encrypt:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/h1&gt;

&lt;p&gt;Anyone who has had to go through the rigmarole of setting up a https server knows what a pain it is. The certs are generally completely overpriced too. &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; Certs are free and full automation is already available for Apache, NGINX, Caddy and more. Now you basically have no reason not to use https.&lt;/p&gt;

&lt;p&gt;This is a massive industry segment disruption. I&amp;rsquo;m thrilled to see it happen.&lt;/p&gt;

&lt;h1 id=&#34;security-first-and-privacy-first:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Security First and Privacy First&lt;/h1&gt;

&lt;p&gt;I use uBlock Origin, Pop-up Blocker, Do Not Track and Ghostery on all my browsers. A lot of the time I use &lt;a href=&#34;https://www.blackvpn.com/&#34;&gt;BlackVPN&lt;/a&gt; too. Yet somehow, with my anti-business setup, many many companies received online orders and money from me this Christmas. I&amp;rsquo;m done with the online advertising industry. All the stuff Doc Searls has been talking about for years is still valid. As for governments thinking our online activities are their business, you need to start fighting back now.&lt;/p&gt;

&lt;h1 id=&#34;google-cardboard-and-youtube-360:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Google Cardboard and YouTube 360&lt;/h1&gt;

&lt;p&gt;Somehow I completely missed the launch of Cardboard support in YouTube and the creation of 360 videos by an ever growing set of people. The first one I saw was &lt;a href=&#34;https://www.youtube.com/watch?v=QnYncJdEh64&#34;&gt;Colin Furze&lt;/a&gt; and it&amp;rsquo;s just incredible. The &lt;a href=&#34;https://www.youtube.com/watch?v=f-7qq8n2iqw&#34;&gt;second&lt;/a&gt; was one based on Star Wars The Force Awakens, and is 100x better than the movie. I went and got a much more &lt;a href=&#34;http://eud.dx.com/product/844380189&#34;&gt;high quality plastic&lt;/a&gt; &amp;ldquo;Cardboard&amp;rdquo; as a result. It&amp;rsquo;s excellent. The recently launched &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.vr.cyclops&#34;&gt;Google Cardboard Camera&lt;/a&gt; is also superb but images are sadly locked to the device the panoramic photo was taken on.&lt;/p&gt;

&lt;p&gt;This is one overall technology-set that myself and the kids are 100% in agreement on. It rocks. The next Star Wars movie should be launched on Cardboard (or Oculus or whatevs).&lt;/p&gt;

&lt;h1 id=&#34;node-js-4-x:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Node.js 4.x&lt;/h1&gt;

&lt;p&gt;Phew. The schism has been healed and 4.x is a really great release. Initially I had lots of problems with native modules on Windows which I hope are finally starting to settle down now. Node is still the best choice for a huge range of workloads and cannot be beaten for mobile back-ends.&lt;/p&gt;

&lt;h1 id=&#34;embedded-javascript:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Embedded JavaScript&lt;/h1&gt;

&lt;p&gt;I think JavaScript will completely take over the Embedded world where hard realtime is not required. The &lt;a href=&#34;http://www.espruino.com/&#34;&gt;Espruino project&lt;/a&gt; has shown what is possible here and should be much more widely used. I&amp;rsquo;m looking forward to seeing it running on the BBC&amp;rsquo;s micro:bit. Other projects like &lt;a href=&#34;http://cylonjs.com/&#34;&gt;Cylon.js&lt;/a&gt; are also worth a look.&lt;/p&gt;

&lt;h1 id=&#34;go-golang:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Go/Golang&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ll be honest, C has been the only language I really loved working in. I like Python and I really enjoy the productivity of Node.js but C was what I spent most of my real programming years using. C++ is an abomination and Java always feels like a crazy amount of work to eventually run some bloated barely-portable thing.&lt;/p&gt;

&lt;p&gt;And then I found &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; and immediately felt comfortable. It&amp;rsquo;s C with the sharp edges removed and some really useful stuff added. Static compilation is the killer feature for me. Just drop the very-quickly-compiled binary in anywhere and run it. I&amp;rsquo;m using it more and more for small projects that aren&amp;rsquo;t backing a webapp or mobile app. It could work in both those cases too but it just doesn&amp;rsquo;t have the community in that area the way Node.js has.&lt;/p&gt;

&lt;p&gt;I think Node.js and Go will dominate software development over the next few years.&lt;/p&gt;

&lt;p&gt;Left-field: Go is slowly getting some Android capabilities. Google should go all-in on it and replace Java. If Apple can manage it so well with the move to Swift on iOS (and they used 3 CPU architectures on Mac!), why not? It would kill all the Oracle problems completely and move them away from a legacy language.&lt;/p&gt;

&lt;h1 id=&#34;scriptcraft-minecraft:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Scriptcraft &amp;amp; Minecraft&lt;/h1&gt;

&lt;p&gt;Minecraft continues to dominate my younger kids&amp;rsquo; lives. From Stampy to Servers, they are never bored playing it or watching videos about it. My buddy Walter built the amazing &lt;a href=&#34;http://scriptcraftjs.org/&#34;&gt;Scriptcraft&lt;/a&gt; which enables you to build mods and control Minecraft in, yes you guessed it, JavaScript. &lt;a href=&#34;http://www.peachpit.com/store/beginners-guide-to-writing-minecraft-plugins-in-javascript-9780133930146&#34;&gt;His book&lt;/a&gt; is a must-read for anyone looking for an interesting way to teach kids how to program. I really want to try out some stuff where it interfaces with the real world. I think Microsoft are missing a trick by not rowing in behind Walter and this wonderful project.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also a huge pity to watch Lego completely miss the boat here and continue to sell the crazily overpriced and overspecced Mindstorms. There is a sweetspot to be found in an online-world + real-world + electronics + JavaScript and it ain&amp;rsquo;t Lego bleedin Dimensions.&lt;/p&gt;

&lt;h1 id=&#34;particle-photon:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Particle Photon&lt;/h1&gt;

&lt;p&gt;I was given a &lt;a href=&#34;https://www.particle.io/&#34;&gt;Particle Photon&lt;/a&gt; recently and was blown away by how easy the setup was and how slickly the Cloud IDE works even through firewalls and NAT. Despite the Open Source nature of it, I still worry about lock-in to some degree. Having said that, my &lt;a href=&#34;https://www.kickstarter.com/projects/digistump/oak-by-digistump-wi-fi-for-all-things-arduino-comp&#34;&gt;DigiStump Oak&lt;/a&gt; just shipped (ESP8266 again!) and it it now Particle API compatible. I&amp;rsquo;d love to see some sort of multi-vendor federated distributed Particle clouds where you aren&amp;rsquo;t betting your IoT strategy on the financial stability of one startup.&lt;/p&gt;

&lt;h1 id=&#34;react-native:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;React Native&lt;/h1&gt;

&lt;p&gt;Use JavaScript to &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;build Native Apps on iOS and Android&lt;/a&gt;. What&amp;rsquo;s not to like? Weird how I hate Facebook the site/app but love so much of their Engineering.&lt;/p&gt;

&lt;h1 id=&#34;rgb-leds-neopixels:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;RGB LEDs / Neopixels&lt;/h1&gt;

&lt;p&gt;Ridiculous amount of fun with simple individually controllable RGB LEDs. These are going to be everywhere in 2016. Everywhere.&lt;/p&gt;

&lt;h1 id=&#34;3d-printing:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;3D Printing&lt;/h1&gt;

&lt;p&gt;I still adore my &lt;a href=&#34;https://printrbot.dozuki.com/Guide/Assembling+the+NEW+Printrbot+Simple+Maker&#39;s+Kit/123&#34;&gt;Printrbot Simple Maker&amp;rsquo;s Edition&lt;/a&gt;. I continue to be surprised by the quality of prints from such a cheap printer. I&amp;rsquo;ve had some fun with Ninjaflex and unusual colours this year. Also a multitude of #PiZero cases! If funds permit, I&amp;rsquo;ll probably start looking at one of the &lt;a href=&#34;http://www.bq.com/es/prusa&#34;&gt;Prusa i3 variants&lt;/a&gt; to get a bigger print area but otherwise it does everything I need.&lt;/p&gt;

&lt;h1 id=&#34;efibre-by-eir:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;eFibre by Eir&lt;/h1&gt;

&lt;p&gt;We get 92Mbs down, 19Mbs up. It&amp;rsquo;s completely changed how we use the internet. Bravo Eir(com). Genuinely surpassed all expectations. Getting speeds like that on a poxy twisted pair is staggering.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s be absolutely clear about broadband in this country, the Government&amp;rsquo;s latest target of 30Mbs for everyone is a joke. By the time it&amp;rsquo;s done, it&amp;rsquo;ll be completely out of date. Why can these people not understand that ultra-fast broadband everywhere will do more for employment in this country than anything else. They&amp;rsquo;d be heroes in history for doing this right, not remembered as a bunch of clowns who couldn&amp;rsquo;t properly roll out a water quango and postcode quango.&lt;/p&gt;

&lt;h1 id=&#34;statically-hosted-blogs:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Statically hosted Blogs&lt;/h1&gt;

&lt;p&gt;It feels like every day there is another WordPress security scare. And that&amp;rsquo;s without mentioning the plugin ecosystem horror. I got sick of the upgrade cycle treadmill and constant exploits last year and moved everything to statically hosted blogs. First with &lt;a href=&#34;http://harpjs.com/&#34;&gt;Harp.js&lt;/a&gt;, then with &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt; and now with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. All fine tools, all work well with GitHub Pages and OpenShift. The incredible speed of Hugo is what makes it my current favourite. Edit, build, deploy, fuggedaboudit. I will never go back to a traditional DB-backed CMS.&lt;/p&gt;

&lt;h1 id=&#34;dirt-cheap-android-phones-and-tablets:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Dirt-cheap Android phones and tablets&lt;/h1&gt;

&lt;p&gt;I got a &lt;a href=&#34;http://www.dx.com/p/presale-doogee-x5-quad-core-android-5-1-wcdma-bar-phone-w-5-0-ips-hd-8gb-rom-gps-xender-black-400551&#34;&gt;Doogee X5 Android phone for €55&lt;/a&gt; a few weeks ago as a backup device. Apart from the case being a bit plasticky, it could pass for €200 worth. It has a great screen and surprising speed. 2 SIM slots and an SD card slot. Samsung could learn a lot from Doogee.&lt;/p&gt;

&lt;p&gt;One of my daughters got the lowest-level Kindle Fire as a Christmas present. The specs are garbage. She loves it. It does absolutely everything she needs and she hasn&amp;rsquo;t asked to use the iPad Mini once since she got it.&lt;/p&gt;

&lt;p&gt;I seriously doubt I&amp;rsquo;ll ever buy a premium phone on contract again. Once One Plus return to removable backs, replaceable batteries and SD card slots, I&amp;rsquo;ll jump to either them or the Wileyfox. Apart from the camera, there is practically nothing on my Galaxy S6 that I couldn&amp;rsquo;t do with an S4 or HTC Sensation. And they are both more robust and have replaceable batteries and SD card slots.&lt;/p&gt;

&lt;h1 id=&#34;linux-everywhere:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Linux everywhere&lt;/h1&gt;

&lt;p&gt;Everywhere. This makes me happy. I was very surprised my other daughter was more than happy to get an old hand-me-down laptop running Fedora 23. As long as it had Chrome, YouTube, Kodi and Minecraft she didn&amp;rsquo;t give a damn what the OS was. The OS is irrelevant to all my kids. In our house we segue seamlessly from Android to iOS to Windows to OSX to Fedora to Raspbian. The only things that matter are the apps and the content.&lt;/p&gt;

&lt;h1 id=&#34;messaging-apps:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Messaging Apps&lt;/h1&gt;

&lt;p&gt;Our entire extended family is on WhatsApp including grandparents. SMS is dead to us. MMS was never a thing. I&amp;rsquo;d prefer if we were all using an Open Source secure P2P system but we&amp;rsquo;ll get there. The family breakdown is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adults: WhatsApp. Tiny amount of FB Messenger&lt;/li&gt;
&lt;li&gt;Teens: FB Messenger, some Viber and some WhatsApp to the (grand)parents&lt;/li&gt;
&lt;li&gt;Tweens/Smallies: Viber, Snapchat and some WhatsApp to the (grand)parents&lt;/li&gt;
&lt;li&gt;Youngest: Uses Hangouts to her cousin. Including live video!&lt;/li&gt;
&lt;li&gt;No one: Telegram.&lt;/li&gt;
&lt;li&gt;Curveball - Tweens using Instagram comments as a weird chat channel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Top tip - WhatsApp needs a phone number, Viber doesn&amp;rsquo;t. Many many smaller kids have tablets, not phones. WhatsApp really missing out here. Our solution is to put free Tesco Mobile SIMs in old phones and never put credit on them. Gets over the WhatsApp problem.&lt;/p&gt;

&lt;p&gt;9yo yesterday: &amp;ldquo;What&amp;rsquo;s &amp;lsquo;Messaging&amp;rsquo; on my iPhone&amp;rdquo;. Me: &amp;ldquo;It&amp;rsquo;s SMS&amp;rdquo;. Her: &amp;ldquo;What&amp;rsquo;s that&amp;rdquo;. Me: &amp;ldquo;Texts&amp;rdquo;. Her: &amp;ldquo;Ah ok. Why are there so many apps for messaging? Why not just one?&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;2fa-and-authy:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;2FA and Authy&lt;/h1&gt;

&lt;p&gt;Two Factor Authentication is a complete pain in the neck. It really is.&lt;/p&gt;

&lt;p&gt;Turn it on everywhere now. Do it. Do it now.&lt;/p&gt;

&lt;p&gt;The fact that PayPal still doesn&amp;rsquo;t have it is a complete disgrace. I&amp;rsquo;d strongly recommend using &lt;a href=&#34;https://www.authy.com/&#34;&gt;Authy&lt;/a&gt; instead of the Google Authenticator App. The main reason is that you can install Authy on multiple phones/tablets which you cannot do with Authenticator. They also have a Chrome extension.&lt;/p&gt;

&lt;h1 id=&#34;things-that-continue-to-disappoint:3ae191ff0530ded325f31357fd1b08a5&#34;&gt;Things that continue to disappoint&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Twitter - Useless Web App and Mobile App. Still hostile to developers who make better ones. And still no Filters, in 2015!&lt;/li&gt;
&lt;li&gt;Facebook - Uninstalled the mobile Apps. A hand-crafted List is the only way to put it under your control. Impossible to use FB for realtime events. Ugh.&lt;/li&gt;
&lt;li&gt;Google - Local Search and Reviews remain a complete embarrassment. Have them AdBlocked and Ghostery-ed. Maps degenerating. Photos great tho!&lt;/li&gt;
&lt;li&gt;Google Compute Cloud - Awful. Amateur hour. Avoid. Particularly the MySQL service.&lt;/li&gt;
&lt;li&gt;Mobile device form factors - Nothing new since 2007. Bored to death of glass slabs.&lt;/li&gt;
&lt;li&gt;Mobile device usability - I&amp;rsquo;ll still use a desktop for anything other than quick glance. Everything feels slow and awkward. Android and iOS&lt;/li&gt;
&lt;li&gt;Batteries - Hurry up already. The only excitement here seems to be exploding LiPos&lt;/li&gt;
&lt;li&gt;AMD CPUs - RIP AMD. After decades of building PCs with AMD CPUs, I got my first i7 in December. It&amp;rsquo;s over AMD, give up.&lt;/li&gt;
&lt;li&gt;Emojis - All those emojis but they never have the one I want.&lt;/li&gt;
&lt;li&gt;Blockchain - Hype machine in overdrive far too soon. Show me something a kid can understand in 30 seconds and delivers immediate benefit. Everything I&amp;rsquo;ve tried has been a giant pain in the arse including Identity, Money, DNS and Messaging.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My 2015 Christmas turkey oven thermometer and clock</title>
      <link>http://conoroneill.net/my-2015-christmas-turkey-oven-thermometer/</link>
      <pubDate>Thu, 31 Dec 2015 18:41:12 +0000</pubDate>
      
      <guid>http://conoroneill.net/my-2015-christmas-turkey-oven-thermometer/</guid>
      <description>

&lt;p&gt;For the &lt;a href=&#34;http://conoroneill.net/our-first-arduino-christmas-turkey/&#34;&gt;third year&lt;/a&gt; in a row I decided to build a new oven thermometer for the Christmas turkey, as all of the markings on our temperature knob have been gone for years. We also have one of those mechanical dial thermometers you place inside the oven but they are hard to read and get in the way. My last two attempts worked ok but I was concerned about accuracy. I also used a temperature probe in the meat for belt and braces. The setup was as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pjrc.com/store/teensy31.html&#34;&gt;Teensy 3.1&lt;/a&gt; which has 16-bit (13-bit effective) ADCs rather than the usual Arduino 10-bit&lt;/li&gt;
&lt;li&gt;The same &lt;a href=&#34;https://www.adafruit.com/products/1778&#34;&gt;Adafruit AD8495&lt;/a&gt; thermocouple amplifier as last year&lt;/li&gt;
&lt;li&gt;A new long, slightly more expensive K-type thermocouple&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;http://www.dx.com/p/produino-5v-voltage-boost-mobile-power-module-green-1a-282899&#34;&gt;voltage-booster and battery charging module&lt;/a&gt; from DX&lt;/li&gt;
&lt;li&gt;A dirt-cheap &lt;a href=&#34;http://www.ebay.co.uk/sch/i.html?_nkw=ILI9341&#34;&gt;ILI9341 TFT LCD&lt;/a&gt; from eBay&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dx.com/p/meeeno-ds1307-real-time-clock-brick-module-for-arduino-yellow-works-with-official-arduino-boards-213941&#34;&gt;DS1307 Realtime Clock&lt;/a&gt; from DX using an &lt;a href=&#34;https://github.com/adafruit/RTClib&#34;&gt;Adafruit library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A small 3.7V Lipo battery&lt;/li&gt;
&lt;li&gt;Lego, as I didn&amp;rsquo;t have enough time to design a 3D-printable case and last year&amp;rsquo;s cardboard was just &lt;a href=&#34;https://twitter.com/conoro/status/554986388861779968&#34;&gt;too klassy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code is a mix of Adafruit, &lt;a href=&#34;https://github.com/PaulStoffregen/ILI9341_t3&#34;&gt;Paul Stoffregen&lt;/a&gt; for the improved LCD code with lovely Magenta Comic Sans Font :-) and my own.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t bother with averaging the values but the jumpiness of the temperature compared to room temp or boiling water tells me our old oven is a disaster and needs replacing.&lt;/p&gt;

&lt;p&gt;And just like the previous two years, the turkey was dry despite &lt;a href=&#34;http://www.seriouseats.com/2012/11/how-to-spatchcock-cook-turkey-thanksgiving-fast-easy-way-spatchcocked-slideshow.html&#34;&gt;spatchcocking it&lt;/a&gt;, &lt;a href=&#34;http://www.seriouseats.com/2014/11/quick-and-dirty-guide-to-brining-turkey-chicken-thanksgiving.html&#34;&gt;dry-brining it&lt;/a&gt; and watching the temperature closely :-( Next year I&amp;rsquo;m doing a boned and rolled one and I&amp;rsquo;ve ordered a cheap but protected Chinese &lt;a href=&#34;http://www.aliexpress.com/item/Generic-New-3-Meter-High-Temperature-100-1250-C-Thermocouple-K-Type-50mm-Probe-Sensors/32334218983.html&#34;&gt;oven probe&lt;/a&gt; and &lt;a href=&#34;http://www.aliexpress.com/item/Brand-New-TM-902C-Black-K-Type-Digital-LCD-Temperature-Detector-Thermometer-Industrial-Thermodetector-Meter-Thermocouple/32220138975.html&#34;&gt;temperature readout&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I really like the DX voltage booster. It enables you to connect a LiPo battery and a micro-USB power source. It then provides 5V on a standard USB socket. The power source can also charge the battery whilst powering the device. You can then remove the power source and the battery will power the device without interruption. It&amp;rsquo;s almost perfect except for one stupid feature. You can&amp;rsquo;t connect a battery to it to power a device without connecting (even momentarily) the power source (e.g. a phone charger). If it could do that then it&amp;rsquo;d be pretty much at the same level as the Adafruit boost devices. I&amp;rsquo;ve been unable to find any datasheets for it but ordered two more anyway.&lt;/p&gt;

&lt;h2 id=&#34;prototype:711c6bef540d9f4341e884a7bd9c92f3&#34;&gt;Prototype&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/thermometer05.jpg&#34; alt=&#34;Prototype&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;completed-board:711c6bef540d9f4341e884a7bd9c92f3&#34;&gt;Completed Board&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/thermometer02.jpg&#34; alt=&#34;Completed board&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;lego-case:711c6bef540d9f4341e884a7bd9c92f3&#34;&gt;Lego Case&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/thermometer03.jpg&#34; alt=&#34;Lego Case&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;side-view:711c6bef540d9f4341e884a7bd9c92f3&#34;&gt;Side View&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/thermometer04.jpg&#34; alt=&#34;Side View&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;code-latest-always-on-gist-here-https-gist-github-com-conoro-2875556b7477e443ae0a:711c6bef540d9f4341e884a7bd9c92f3&#34;&gt;Code (latest always &lt;a href=&#34;https://gist.github.com/conoro/2875556b7477e443ae0a&#34;&gt;on Gist here&lt;/a&gt; )&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Temperature from AD8495 K-type Thermocoule adapter and Datetime from DS1307 RTC. Displayed on ILI9341 LCD.
//
// MIT License (MIT)
// Copyright (c) 2015 Conor O&#39;Neill
// Portions copyright Limor Fried/Ladyada for Adafruit Industries and others
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#include &amp;lt;Wire.h&amp;gt;
#include &amp;quot;RTClib.h&amp;quot;

#include &amp;quot;SPI.h&amp;quot;
#include &amp;quot;Adafruit_GFX.h&amp;quot;
#include &amp;quot;ILI9341_t3.h&amp;quot;
#include &amp;quot;font_ComicSansMSBold.h&amp;quot;

#if defined(__SAM3X8E__)
    #undef __FlashStringHelper::F(string_literal)
    #define F(string_literal) string_literal
#endif

// These are the pins used for the UNO and Teensy
#define _sclk 13
#define _miso 12
#define _mosi 11
#define _cs 10
#define _dc 9
#define _rst 8

// Using software SPI is really not suggested, its incredibly slow
//Adafruit_ILI9340 tft = Adafruit_ILI9340(_cs, _dc, _mosi, _sclk, _rst, _miso);
// Use hardware SPI
ILI9341_t3 tft = ILI9341_t3(_cs, _dc, _rst);

RTC_DS1307 RTC;

String dateOut=&amp;quot;&amp;quot;;
String timeOut=&amp;quot;&amp;quot;;
String datePrev=&amp;quot;&amp;quot;;
String timePrev=&amp;quot;&amp;quot;;
float temperature=0;
float temperaturePrev=0;

void setup () {
    Serial.begin(57600);

    tft.begin();  
    tft.fillScreen(ILI9341_BLACK);

    Wire.begin();
    RTC.begin();

    // following line sets the RTC to the date &amp;amp; time this sketch was compiled
    // Uncomment this once per power down of the RTC and flash it. Then re-comment-out and reflash
    //RTC.adjust(DateTime(__DATE__, __TIME__));

  if (! RTC.isrunning()) {
    Serial.println(&amp;quot;RTC is NOT running!&amp;quot;);
    // following line sets the RTC to the date &amp;amp; time this sketch was compiled
    //RTC.adjust(DateTime(__DATE__, __TIME__));
  }

}

void loop () {

    // Read temperature as analogue voltage from AD8495
    analogReadResolution(13);  
    int raw = analogRead(A7);
    float Vout = raw * (3.3 / 8191.0);
    temperature = (Vout - 1.25)/0.005;

    // Print Temperature to Serial console
    Serial.println(temperature);

    // Get current DateTime from DS1307 RTC
    DateTime now = RTC.now();

    // Print it to Serial Console
    Serial.print(now.year(), DEC);
    Serial.print(&#39;/&#39;);
    Serial.print(now.month(), DEC);
    Serial.print(&#39;/&#39;);
    Serial.print(now.day(), DEC);
    Serial.print(&#39; &#39;);
    Serial.print(now.hour(), DEC);
    Serial.print(&#39;:&#39;);
    Serial.print(now.minute(), DEC);
    Serial.print(&#39;:&#39;);
    Serial.print(now.second(), DEC);

    // Generate nicely formatted datetime string for ILI9341
    dateOut=&amp;quot;&amp;quot;;
    timeOut=&amp;quot;&amp;quot;;
    if (now.hour() &amp;lt; 10){
        timeOut += &amp;quot;0&amp;quot;;
    }
    timeOut += now.hour();
    timeOut += &#39;:&#39;;
    if (now.minute() &amp;lt; 10){
        timeOut += &amp;quot;0&amp;quot;;
    }
    timeOut += now.minute();
    timeOut += &#39;:&#39;;
    if (now.second() &amp;lt; 10){
        timeOut += &amp;quot;0&amp;quot;;
    }
    timeOut += now.second();
    Serial.println();
    if (now.day() &amp;lt; 10){
        dateOut += &amp;quot;0&amp;quot;;
    }
    dateOut += now.day();
    dateOut += &#39;/&#39;;
    if (now.month() &amp;lt; 10){
        dateOut += &amp;quot;0&amp;quot;;
    }
    dateOut += now.month();
    dateOut += &#39;/&#39;;
    dateOut += now.year();

    // Print Temperature and Datetime to ILI9341 LCD
    unsigned long start = micros();
    tft.setCursor(0, 0);
    tft.setTextColor(ILI9341_MAGENTA);
    tft.setFont(ComicSansMS_24_Bold);
    tft.println(&amp;quot;Temperature:&amp;quot;);

    // Wipe out previous text and write new text
    tft.setCursor(0, 45);
    tft.setTextColor(ILI9341_BLACK);
    tft.println(temperaturePrev);
    tft.setTextColor(ILI9341_MAGENTA);
    tft.println(temperature);
    temperaturePrev = temperature;

    // Wipe out previous text and write new text
    tft.setCursor(0, 100);
    tft.setTextColor(ILI9341_BLACK);
    tft.println(datePrev);
    tft.setTextColor(ILI9341_MAGENTA);
    tft.println(dateOut);
    datePrev = dateOut;

    // Wipe out previous text and write new text
    tft.setCursor(0, 145);
    tft.setTextColor(ILI9341_BLACK);
    tft.println(timePrev);
    tft.setTextColor(ILI9341_MAGENTA);
    tft.println(timeOut);
    timePrev = timeOut;

    delay(1000);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Auto-tweeting the #Bandon floods with Twilio, Tasker, Let&#39;s Encrypt, a #PiZero, golang, Caddy and an Asus router</title>
      <link>http://conoroneill.net/auto-tweeting-the-bandon-floods-with-twilio-tasker-lets-encrypt-a-pi-zero-golang-caddy-and-an-asus-router/</link>
      <pubDate>Wed, 30 Dec 2015 17:15:23 +0000</pubDate>
      
      <guid>http://conoroneill.net/auto-tweeting-the-bandon-floods-with-twilio-tasker-lets-encrypt-a-pi-zero-golang-caddy-and-an-asus-router/</guid>
      <description>

&lt;h2 id=&#34;intro:e19abcb8e6b6d101fc1a316dfdf4aa74&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;I haven&amp;rsquo;t blogged properly about the $5 &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;Raspberry Pi Zero&lt;/a&gt; computer yet, despite Tweeting non-stop about it. I will soon. In the meantime, I&amp;rsquo;ll just repeat that&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It&amp;rsquo;s a major moment in computing&lt;/em&gt;&lt;/p&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/146893658&#34; width=&#34;500&#34; height=&#34;281&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The inclusion of a free one on the cover of the &lt;a href=&#34;https://www.raspberrypi.org/magpi/raspberry-pi-zero-out-today-get-it-free-with-the-magpi-40/&#34;&gt;MagPi Magazine&lt;/a&gt; will be remembered for years to come.&lt;/p&gt;

&lt;p&gt;The town in which I live, Bandon, flooded again recently, because Ireland. I&amp;rsquo;ve had &lt;a href=&#34;https://github.com/conoro/bandonfews-nodejs&#34;&gt;a simple Node.js app&lt;/a&gt; running on a Gen 1 Raspberry Pi B, scraping the &lt;a href=&#34;http://www.bandonfloodwarning.ie/&#34;&gt;Bandon Flood Warning&lt;/a&gt; site every 15 minutes for the past four years and saving the data in &lt;a href=&#34;https://www.google.com/fusiontables/DataSource?docid=103YIcARoxuaWT7NfZ8mVBzY554sF_3ONYC1N3DE&amp;amp;pli=1#chartnew:id=5&#34;&gt;Google Fusion Tables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes that&amp;rsquo;s how Cork County Council&amp;rsquo;s/OPW&amp;rsquo;s Flood Warning site looks in the middle of one of our biggest floods ever:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/service_unavailable.jpg&#34; alt=&#34;FEWS Unavailable&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With all this flooding, I decided to finally create a related setup which takes the SMS Flood alerts from the County Council and auto-tweets them to the &lt;a href=&#34;https://twitter.com/bandonfews&#34;&gt;@BandonFEWS&lt;/a&gt; Twitter account which I created and have manually updated since 2011.&lt;/p&gt;

&lt;h2 id=&#34;the-details:e19abcb8e6b6d101fc1a316dfdf4aa74&#34;&gt;The Details&lt;/h2&gt;

&lt;p&gt;So the final $7 hardware (including Wifi adapter) now looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/pizero_fews.jpg&#34; alt=&#34;PiZero FEWS&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My phone is registered with the Bandon Flood Warning site (it has been for years)&lt;/li&gt;
&lt;li&gt;I have a &lt;a href=&#34;https://www.twilio.com/&#34;&gt;Twilio&lt;/a&gt; account with a $1 per month UK SMS number. Irish numbers are $6 per month :-(&lt;/li&gt;
&lt;li&gt;SMSes are sent to my phone from Cork CoCo announcing a new flood warning level or severe weather alert (two different systems and numbers)&lt;/li&gt;
&lt;li&gt;The Android &lt;a href=&#34;https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm&amp;amp;hl=en&#34;&gt;Tasker App&lt;/a&gt; watches for SMS from these sources with particular contents&lt;/li&gt;
&lt;li&gt;Tasker auto-forwards these SMSes to my Twilio number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/tasker.jpg&#34; alt=&#34;Tasker&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have the Twilio number configured to call a my simple API end-point with the SMS contents&lt;/li&gt;
&lt;li&gt;The API end-point is running on one of my $5 Raspberry Pi Zeros and is written in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. Code below.&lt;/li&gt;
&lt;li&gt;The PiZero is behind my home router which is an &lt;a href=&#34;https://www.asus.com/ie/Networking/RTAC68U/&#34;&gt;Asus RT-AC68&lt;/a&gt; so somehow Twilio had to connect through that to the Zero&lt;/li&gt;
&lt;li&gt;I initially setup a simple port forward to the Zero and I already use &lt;a href=&#34;http://no-IP.com&#34;&gt;no-IP.com&lt;/a&gt; for Dynamic DNS. So Twilio called &lt;a href=&#34;http://something.no-ip.net:1234&#34;&gt;http://something.no-ip.net:1234&lt;/a&gt; and my router passed the request to the PiZero server app on port blah&lt;/li&gt;
&lt;li&gt;The PiZero server app parsed the POST request and extracted out the SMS. It split this into multiple Tweets (a la Tweetstorm) if more than 140 chars and used the &lt;a href=&#34;https://github.com/ChimeraCoder/anaconda&#34;&gt;Anaconda Go client library&lt;/a&gt; to post that to @BandonFEWS on Twitter&lt;/li&gt;
&lt;li&gt;Done&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I wasn&amp;rsquo;t happy with http, nooooo, I wanted https and I wanted to use &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;. Cue rabbit hole.&lt;/p&gt;

&lt;h2 id=&#34;let-s-encrypt-and-caddy:e19abcb8e6b6d101fc1a316dfdf4aa74&#34;&gt;Let&amp;rsquo;s Encrypt and Caddy&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s Encrypt offers free https certs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It&amp;rsquo;s as revolutionary as the PiZero.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It also provides APIs so this can be done completely automatically. This resulted in lots of people adding easy Let&amp;rsquo;s Encrypt integration and client libraries very quickly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt; is a really nice simple-to-use web-server written in Go. It runs perfectly on the PiZero. It also has completely automatic Let&amp;rsquo;s Encrypt integration if you want it. So I stuck it in front of my Go server to turn it into a https server. Except life is never that easy.&lt;/li&gt;
&lt;li&gt;I hit two immediate problems:

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;d have to drop no-IP for Dynamic DNS since I&amp;rsquo;m trying to register for my own https cert&lt;/li&gt;
&lt;li&gt;To stop baddies registering domains they don&amp;rsquo;t own, Let&amp;rsquo;s Encrypt calls back to you and insists on doing that on port 443. So my random high port number on my router wasn&amp;rsquo;t going to work&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Then I realised that my DNS provider, &lt;a href=&#34;http://www.dnsmadeeasy.com/&#34;&gt;DNSMadeEasy&lt;/a&gt; has Dynamic DNS built-in. So I grabbed one of my parked domains and set it up with a Dynamic DNS A Record, giving it a dedicated password. But then of course I discovered that my Asus Router doesn&amp;rsquo;t have support for Custom Dynamic DNS out of the box.&lt;/li&gt;
&lt;li&gt;I quickly found the &lt;a href=&#34;http://asuswrt.lostrealm.ca/&#34;&gt;Merlin Firmware&lt;/a&gt; which is interesting. The standard Asus firmware is just a simplified fork of &lt;a href=&#34;http://www.polarcloud.com/tomato&#34;&gt;Tomato&lt;/a&gt; so Merlin forks again and adds back in the stuff that Asus removed. So you keep the same UI and general functionality, just with more customisation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin/wiki/Installation&#34;&gt;Installation was a doddle&lt;/a&gt; and then I just had to whip up a simple script a few lines long to call out to DNSMadeEasy whenever the router&amp;rsquo;s IP address changed (see below).&lt;/li&gt;
&lt;li&gt;I then temporarily port forwarded 443 on the router to the Pi Zero and started Caddy with this incredibly complicated config file :-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caddyfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file
https://www.conorsdomain.com
proxy / localhost:9998
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Caddy saw that I wanted https, so it connected to Let&amp;rsquo;s Encrypt and a minute later I had everything necessary for my secure web-server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Jaw-drop time&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once the registration was done I could remove the 443 port forward and switch to a non-standard port&lt;/li&gt;
&lt;li&gt;I went over to Twilio and provided the new &lt;a href=&#34;https://conorsdomain.com:9999&#34;&gt;https://conorsdomain.com:9999&lt;/a&gt; as the end-point to call. No joy. But a quick support ticket later and they made a change over the weekend(!) to fix it. Boom, everything working fine.&lt;/li&gt;
&lt;li&gt;With the terrible weather, I didn&amp;rsquo;t have to wait long for the first non-test SMS to appear. A couple of seconds later it was on Twitter:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/flood_alert.jpg&#34; alt=&#34;Bandon Flood Warning&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;alternatives:e19abcb8e6b6d101fc1a316dfdf4aa74&#34;&gt;Alternatives&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Of course I could exclude Twilio from this entire flow and call the end-point directly from Tasker but SMS will often work when no data connection is available.&lt;/li&gt;
&lt;li&gt;Having said that, the connection to the phone is a big worry as we are in a poor signal area. But registering my UK Twilio number on the Flood Warning site didn&amp;rsquo;t work (local warnings for local people) and I&amp;rsquo;m not paying $6 a month for an Irish number.&lt;/li&gt;
&lt;li&gt;In theory I could take the scraped data from the site and generate my own alerts but the Council rightly overrides the default trigger levels on occasion to warn people of impending flooding.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go-code-see-for-https-gist-github-com-conoro-f1a3f7c5b96e2b033119-https-gist-github-com-conoro-f1a3f7c5b96e2b033119-for-latest:e19abcb8e6b6d101fc1a316dfdf4aa74&#34;&gt;Go Code (See for &lt;a href=&#34;https://gist.github.com/conoro/f1a3f7c5b96e2b033119&#34;&gt;https://gist.github.com/conoro/f1a3f7c5b96e2b033119&lt;/a&gt; for latest)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
	&amp;quot;net/url&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/ChimeraCoder/anaconda&amp;quot;
)

type Configuration struct {
	ConsumerKey       string
	ConsumerSecret    string
	AccessToken       string
	AccessTokenSecret string
}

func main() {
	file, _ := os.Open(&amp;quot;conf.json&amp;quot;)
	//file, _ := os.Open(&amp;quot;conf-test.json&amp;quot;)
	decoder := json.NewDecoder(file)
	configuration := Configuration{}
	err := decoder.Decode(&amp;amp;configuration)
	if err != nil {
		fmt.Println(&amp;quot;config error:&amp;quot;, err)
	}
	anaconda.SetConsumerKey(configuration.ConsumerKey)
	anaconda.SetConsumerSecret(configuration.ConsumerSecret)
	api := anaconda.NewTwitterApi(configuration.AccessToken, configuration.AccessTokenSecret)

	http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
		body := r.PostFormValue(&amp;quot;Body&amp;quot;)
		log.Println(string(body))
		if strings.Contains(body, &amp;quot;Bandon FEWS&amp;quot;) || strings.Contains(body, &amp;quot;Met Eireann&amp;quot;) {
			fmt.Fprintf(w, &amp;quot;Thanks for the update&amp;quot;)

			a := []rune(body)
			if len(a) &amp;lt;= 140 {
				// Just post normal Tweet
				result, err := api.PostTweet(body, nil)
				if err != nil {
					fmt.Println(err)
				} else {
					fmt.Println(result)
					fmt.Println(&amp;quot;Tweet ID: &amp;quot;, result.Id)
				}
			} else {
				// have to split into a Tweetstorm
				var originalTweetID int64
				var subTweet string = &amp;quot;&amp;quot;
				var tweetCount int64 = 0
				tweetParams := url.Values{}
				for i, r := range a {
					subTweet = subTweet + string(r)
					if i &amp;gt; 0 &amp;amp;&amp;amp; (i+1)%137 == 0 {
						tweetCount++
						// Need to do normal first tweet but in_reply_to successive tweets
						if tweetCount == 1 {
							// Just Tweet and extract the ID from the response
							result, err := api.PostTweet(&amp;quot;1/ &amp;quot;+subTweet, nil)
							if err != nil {
								fmt.Println(err)
							} else {
								fmt.Println(result)
								originalTweetID = result.Id
							}
						} else {
							// adding one second delay in Tweetstorm to prevent any throttling by Twitter
							time.Sleep(time.Second)
							// Tweet in reply to the first tweet by setting in_reply_to_status_id
							// originalTweetID
							tweetParams.Set(&amp;quot;in_reply_to_status_id&amp;quot;, strconv.FormatInt(originalTweetID, 10))
							result, err := api.PostTweet(strconv.FormatInt(tweetCount, 10)+&amp;quot;/ &amp;quot;+subTweet, tweetParams)
							if err != nil {
								fmt.Println(err)
							} else {
								fmt.Println(result)
							}
						}
						subTweet = &amp;quot;&amp;quot;
					}
					if i == len(a)-1 &amp;amp;&amp;amp; subTweet != &amp;quot;&amp;quot; {
						// just Tweet whatever text is left at the end
						time.Sleep(time.Second)
						tweetCount++
						// Tweet in reply to the first tweet by setting in_reply_to_status_id
						// originalTweetID
						tweetParams.Set(&amp;quot;in_reply_to_status_id&amp;quot;, strconv.FormatInt(originalTweetID, 10))
						result, err := api.PostTweet(strconv.FormatInt(tweetCount, 10)+&amp;quot;/ &amp;quot;+subTweet, tweetParams)
						if err != nil {
							fmt.Println(err)
						} else {
							fmt.Println(result)
						}
					}
				}
			}
		}
	})

	log.Fatal(http.ListenAndServe(&amp;quot;:8333&amp;quot;, nil))

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;asus-dnsmadeeasy-update:e19abcb8e6b6d101fc1a316dfdf4aa74&#34;&gt;Asus DNSMadeEasy Update&lt;/h2&gt;

&lt;p&gt;This is smidge fiddly. &lt;a href=&#34;https://github.com/RMerl/asuswrt-merlin/wiki/Custom-DDNS&#34;&gt;More details here&lt;/a&gt;. Once you have Merlin installed and you are happily connected to the internet again (you did remember to write down all the settings for your ISP didn&amp;rsquo;t you?). You need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to Administration -&amp;gt; System&lt;/li&gt;
&lt;li&gt;Enable SSH, which also obviously gives you SFTP&lt;/li&gt;
&lt;li&gt;Toggle &amp;ldquo;Format JFFS partition at next boot&amp;rdquo; to Yes&lt;/li&gt;
&lt;li&gt;Toggle &amp;ldquo;Enable JFFS custom scripts and configs&amp;rdquo; to Yes&lt;/li&gt;
&lt;li&gt;Click Apply&lt;/li&gt;
&lt;li&gt;SSH on to the box with your router&amp;rsquo;s Admin username and password&lt;/li&gt;
&lt;li&gt;Create a file called /jffs/scripts/ddns-start&lt;/li&gt;
&lt;li&gt;Make it executable (chmod 755 ddns-start)&lt;/li&gt;
&lt;li&gt;Copy these contents into ddns-start&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
USERNAME=&amp;quot;yourDNSMadeEasyUsername&amp;quot;
PASSWORD=&amp;quot;TheSpecificPasswordYouSetOnThatDNSRecord&amp;quot;
IP=${1}
ID=&amp;quot;TheSpecificRecordIDAssignedbyDNSMaseEasy&amp;quot;

curl -k &amp;quot;https://cp.dnsmadeeasy.com/servlet/updateip?username=${USERNAME}&amp;amp;password=${PASSWORD}&amp;amp;id=${ID}&amp;amp;ip=${IP}&amp;quot; &amp;gt;/dev/null

if [ $? -eq 0 ]; then
    /sbin/ddns_custom_updated 1
else
    /sbin/ddns_custom_updated 0
fi

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Do a reboot for good measure and you should see DDNS displaying success on the main dashboard&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Blogging from my phone with DroidEdit, Hugo, GitHub Pages and Travis</title>
      <link>http://conoroneill.net/blogging-from-my-phone-with-droidedit-hugo-github-travis/</link>
      <pubDate>Sun, 27 Dec 2015 16:38:29 +0000</pubDate>
      
      <guid>http://conoroneill.net/blogging-from-my-phone-with-droidedit-hugo-github-travis/</guid>
      <description>&lt;p&gt;I switched this blog to the superb Go-based tool &lt;a href=&#34;https://gohugo.io/overview/usage/&#34;&gt;Hugo&lt;/a&gt; earlier in the year. Its staggering speed compared to HarpJS and Hexo plus a single executable you can drop in anywhere, make it a no-brainer for static blogs.&lt;/p&gt;

&lt;p&gt;I continued to host for free on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; which means I never ever ever have to worry about WordPress security exploits or badly written plugins again. However using GH Pages means you are quite limited in how things work.&lt;/p&gt;

&lt;p&gt;For several months I used Hugo in the recommended way of having &lt;a href=&#34;https://github.com/conoro/hugo.conoroneill.net&#34;&gt;one Git repo&lt;/a&gt; for the blog&amp;rsquo;s &amp;ldquo;source files&amp;rdquo; and then the original &lt;a href=&#34;https://github.com/conoro/conoro.github.io&#34;&gt;conoro.github.io repo&lt;/a&gt; as a Git sub-module for the deployed HTML. I&amp;rsquo;ve never heard a good word said about Git sub-modules and now I understand why. Nasty awkward things that mess everything up if you blink wrong. But it worked ok-ish until I decided to try &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Travis is a continuous integration tool that can watch for changes in your GitHub repos and then run &amp;ldquo;jobs&amp;rdquo; on them. It&amp;rsquo;s mainly used for building software but there is no reason you can&amp;rsquo;t use it for building a blog. So the initial idea was that I would git add/commit a new blog post in my source repo and then Travis would run Hugo on it and commit the generated HTML to the blog, thereby publishing it.&lt;/p&gt;

&lt;p&gt;The real intent was so I could blog from devices that don&amp;rsquo;t run Hugo like phones and tablets. Of course they&amp;rsquo;d somehow need to support a text editor and Git but not Hugo itself.&lt;/p&gt;

&lt;p&gt;For Android I quickly found the superb &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.aor.droidedit.pro&amp;amp;hl=en&#34;&gt;DroidEdit&lt;/a&gt; which has Git support built-in. It was dead easy to use it to generate a new post and add that to my repo. So I would have almost WordPress-level of easiness in blogging on the fly. Its only real drawback is the lack of Markdown syntax highlighting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/conoroneill.net/wp-content/uploads/2015/12/droidedit.png&#34; alt=&#34;DroidEdit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Except then I tried to get it working with Travis. Several weekends of effort trying to wrangle the Git sub-module setup into submission ended in total frustration. Finally today I said &amp;ldquo;sod sub-modules&amp;rdquo; and went old-school &amp;ldquo;copy the files from one repo to the other and commit them there&amp;rdquo;. And ye know what? &lt;a href=&#34;https://travis-ci.org/conoro/hugo.conoroneill.net&#34;&gt;It worked&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a few bits in there to do with using https:// instead of git://. But the critical one-off steps on your PC are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;get a &lt;a href=&#34;https://github.com/settings/applications&#34;&gt;Github token&lt;/a&gt; for Travis&lt;/li&gt;
&lt;li&gt;Then &lt;a href=&#34;https://docs.travis-ci.com/user/encryption-keys/&#34;&gt;install Travis locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and encrypt your token via:
&lt;code&gt;bash
travis encrypt GH_TOKEN=&amp;lt;secret token here&amp;gt;  
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally add that output to the &amp;ldquo;secure&amp;rdquo; string in .travis.yml.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So here you go with the files you need to do the same:&lt;/p&gt;

&lt;p&gt;.travis.yml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go
go:
  - 1.5.1
sudo: required
env:
  global:
  - USER: Conor O&#39;Neill
  - EMAIL: cwjoneill@gmail.com
  - GH_REF: github.com/conoro/conoro.github.io.git
  - REPO: conoro.github.io
  - GH_REPO: github.com/conoro/${REPO}.git
  - secure: &amp;quot;hHQScM7MWsK/74fvtoBn7lKuTKx1XlU08Ee4UD6ce0wfKNdE/W8z2dn8qzEsSw3YaoU6AULQgXthX+LVAXVZr1wIC6H9Kvjilaj+9ffRXFKrUv79q8s4EiOKqIvYGla5XlhIzP1Qu1qyLCA4dzgaQF6Cn2jB9AkkObnd8YArf3aW3LUbAnRy0ySo0A/QRupN/ckb81LXYnfbzQZB9zniBIhvGPipR0KdQL7GePShPWDeXJPpblo5kEXiIvHo7b1XYx+xACmaQR9PdoDgoTCAFqz2tJzCU92PnbIGw4Jv/ZdnWmt8Z6/4dO73UhcE3PokPvmg7tdsHbFWxhEzg0NaC7cvYsH3xWy9uTipwYLRd3eGbBt+htCZOj+slNHzREkPJBtEBw+b4iLDAr0T5V0kyflgsGOcgSXPyLIKsI0rHFRVAsZxowowK1UjZ05tnSIlFcIK8DX9c0JoXpM2ktOUt8/2EPCbaoKv17HW4BVDb7vXR8VzBf5MY4qku9NrmmYTMJXrzcdQU8JrbASPlHyF79n5xiiyg74Vq2OYCgHPg1nzmSrC1YgQu0W5WXNjWo9jt8h9C3ztuNYvDJkKkXl7KZDTq/s2XEzpzuLIA4rdTX+7lUB93ggN2YFeh6LV+kq58L8BpMPyiT8kxZLMF0HFTzaRNNwymelkPsV/+QZydro=&amp;quot;
git:
  submodules: false
# Use sed to replace the SSH URL with the public URL, then initialize submodules
before_install:
  - sed -i &#39;s/git@github.com:/https:\/\/github.com\//&#39; .gitmodules
install:
  - sudo pip install Pygments
  - go get github.com/spf13/hugo
script: bash ./deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;deploy.sh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

git config --global user.email &amp;quot;cwjoneill@gmail.com&amp;quot;
git config --global user.name &amp;quot;Conor O&#39;Neill&amp;quot;

# Build the project.
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

git clone https://github.com/conoro/conoro.github.io.git
cp -R public/* ${REPO}
cd ${REPO}
git remote
git add -A :/
git commit -a -m &amp;quot;latest via travis&amp;quot;
git push &amp;quot;https://${GH_TOKEN}@${GH_REPO}&amp;quot; master &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Simple Christmas Control of each LED in a 150 RGB LED WS2812 strip</title>
      <link>http://conoroneill.net/simple-individual-150-rgb-led-control/</link>
      <pubDate>Sun, 27 Dec 2015 11:34:18 +0000</pubDate>
      
      <guid>http://conoroneill.net/simple-individual-150-rgb-led-control/</guid>
      <description>&lt;p&gt;One mistake I made with our &lt;a href=&#34;http://conoroneill.net/all-the-tech-behind-our-halloween-hallway-of-horror/&#34;&gt;Halloween setup&lt;/a&gt; was buying an analogue RGB LED strip where all the LEDs had to be set to the same colour. Then a few weeks ago, &lt;a href=&#34;https://twitter.com/joedesbonnet&#34;&gt;Joe Desbonnet&lt;/a&gt; Facebooked about getting a waterproof WS2812 strip with individual LED control. And it wasn&amp;rsquo;t that much more expensive than the analogue one. Off to eBay I went &lt;a href=&#34;http://www.ebay.com/itm/141757617308?_trksid=p2057872.m2749.l2649&amp;amp;var=440868603421&amp;amp;ssPageName=STRK%3AMEBIDX%3AIT&#34;&gt;and ordered one&lt;/a&gt;, far too late for Christmas.&lt;/p&gt;

&lt;p&gt;So I was chuffed that it arrived on Christmas Eve. Unfortunately the 8 amp PSU I ordered on Aliexpress didn&amp;rsquo;t arrive. A quick rustle in my psu drawer found a 4 amp one. Another quick rustle in another box found an old &lt;a href=&#34;https://www.arduino.cc/en/Main/ArduinoBoardNano&#34;&gt;Arduino Nano&lt;/a&gt; and it took barely 5 mins to load it up with the &lt;a href=&#34;https://github.com/adafruit/Adafruit_NeoPixel/blob/master/examples/strandtest/strandtest.ino&#34;&gt;Adafruit strand test code&lt;/a&gt; and wire everything together (one digital pin, gnd, 5v) to give this:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://vine.co/v/iAaKnlhxXWX/embed/simple&#34; width=&#34;600&#34; height=&#34;600&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;script src=&#34;https://platform.vine.co/static/scripts/embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The psu was running warm but not crazily so. However the Arduino kept crashing which hinted that the psu was dropping below 5V to power all those LEDs. So I ran separate power to the Arduino from a phone charger.&lt;/p&gt;

&lt;p&gt;This was followed by 4km of duct tape as the connections and Arduino would have to live outside. A gale was blowing as I tried to attach it to the window frame so I switched to the more sheltered door frame. This &lt;a href=&#34;http://www.everbuild.co.uk/index.php?route=product/product&amp;amp;product_id=364&#34;&gt;Mammoth tape&lt;/a&gt; worked &lt;em&gt;really&lt;/em&gt; well:&lt;/p&gt;

&lt;div&gt;
&lt;iframe src=&#34;https://vine.co/v/iAWEdMizFbB/embed/simple&#34; width=&#34;600&#34; height=&#34;600&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;script src=&#34;https://platform.vine.co/static/scripts/embed.js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;And that was it. Almost zero effort for the best house light decoration we&amp;rsquo;ve ever done. Since these strips can be cut to any length you want and also spliced together, I&amp;rsquo;ll be fashioning a full house-length monstrosity for next Christmas. However I doubt I&amp;rsquo;ll ever reach this level:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/90oZ52M4IC0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>First impressions of @OnionIoT Omega. Also running #golang 1.1.2 and #nodejs 0.10.5 on MIPS</title>
      <link>http://conoroneill.net/onion-omega-first-impressions-running-golang-nodejs/</link>
      <pubDate>Mon, 16 Nov 2015 22:35:48 +0000</pubDate>
      
      <guid>http://conoroneill.net/onion-omega-first-impressions-running-golang-nodejs/</guid>
      <description>

&lt;p&gt;I did a splurge of backing IoT KickStarters a few months ago and the &lt;a href=&#34;https://onion.io/omega/&#34;&gt;Onion Omega&lt;/a&gt; is the first one to land in my postbox. It&amp;rsquo;s a tiny (barely bigger than an SD card) board running the same basic guts as many OpenWRT routers i.e. 400 MHz Atheros MIPS CPU with 64MB of DRAM and 16MB of Flash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/omega_sd.jpg&#34; alt=&#34;Onion Omega&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not familiar with &lt;a href=&#34;https://openwrt.org/&#34;&gt;OpenWRT&lt;/a&gt;, it&amp;rsquo;s an Open Source community replacement firmware for many routers (similar to DD-WRT that I&amp;rsquo;ve used many times) and is Linux under the hood. You generally do your own custom Firmware builds which bundle exactly what you want but you can also install packages via the opkg tool.&lt;/p&gt;

&lt;p&gt;Obviously 400MHz with tiny RAM cannot compete with an RPi but it is far more powerful than most MCUs and runs Linux. The question is whether this middle ground addresses a big enough market, particularly when the price point is almost the same as an RPi Model A and you need to buy add-on cards to work easily with it. I&amp;rsquo;m not sure yet.&lt;/p&gt;

&lt;p&gt;The Onion team are currently building a Web UI and an IoT &amp;ldquo;Cloud&amp;rdquo; as value-adds and of course everything is OpenSource.&lt;/p&gt;

&lt;p&gt;The fact that it just launched means that the software story isn&amp;rsquo;t great right now. The KickStarter mentions things like Node but that isn&amp;rsquo;t available in a supported way. Also the effort around accessing GPIOs etc is focused on Python. And add-on boards like the OLED screen I bought have no support yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/omega_kit.jpg&#34; alt=&#34;Onion Omega Kit&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary-opinion:6373a9f13467451d12a87cf58bb7873b&#34;&gt;Summary Opinion&lt;/h2&gt;

&lt;p&gt;Overall it&amp;rsquo;s a nice board but the lack of &amp;ldquo;buzz&amp;rdquo; around it has me a little worried. The number one thing that projects like this need is community. I think the CHiP might steal a lot of its thunder with more welly at a much lower pricepoint. But perhaps a focus on realtime embedded applications will help here.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to see a library like WiringPi built for it that can easily have wrappers for others languages implemented.&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;ll be ideal as a home API server that I can put anywhere and forget about.&lt;/p&gt;

&lt;p&gt;Another area it could shine, due to its tiny size and low power consumption is robotics. See my comment below about &lt;a href=&#34;http://gobot.io/&#34;&gt;Gobot&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;node-js-partial-success:6373a9f13467451d12a87cf58bb7873b&#34;&gt;Node.js partial success&lt;/h2&gt;

&lt;p&gt;After an initial play around with it, I decided to try out Node and Go. Node was &lt;a href=&#34;https://community.onion.io/topic/46/simple-node-js-wrapper-samples&#34;&gt;built by a community member&lt;/a&gt; but is back on version 0.10.5.&lt;/p&gt;

&lt;p&gt;I copied the Node executable and libv8 to a USB stick and plugged that into the Onion standard &amp;ldquo;dock&amp;rdquo;. I mounted it and ran hello world successfully. Hurrah!&lt;/p&gt;

&lt;p&gt;But then I realised it doesn&amp;rsquo;t have NPM. So I put together a simple Tweeting App, did the NPM install on my Fedora VM and then copied everything to the USB stick.&lt;/p&gt;

&lt;p&gt;The code which ran fine on Fedora crapped out with &amp;ldquo;not authenticated&amp;rdquo; on the Onion. I tried two other Twitter modules with the same result. I wasn&amp;rsquo;t able to see any other error apart from Twitter complaining about authentication.&lt;/p&gt;

&lt;p&gt;So I gave up on Node for the moment.&lt;/p&gt;

&lt;h2 id=&#34;golang-1-1-2-first-failed-attempt:6373a9f13467451d12a87cf58bb7873b&#34;&gt;Golang 1.1.2 first failed attempt&lt;/h2&gt;

&lt;p&gt;On to Go and a giant big rabbit hole.&lt;/p&gt;

&lt;p&gt;So you can&amp;rsquo;t get a recent version of Go for MIPS. However, one smart person &lt;a href=&#34;https://github.com/GeertJohan/openwrt-go&#34;&gt;forked OpenWRT and added Go support&lt;/a&gt; via &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gccgo/Invoking-gccgo.html&#34;&gt;gccgo&lt;/a&gt;. Yay it&amp;rsquo;s Go, boo it&amp;rsquo;s Go 1.1.2.&lt;/p&gt;

&lt;p&gt;But I thought it&amp;rsquo;d be a good experience to try building OpenWRT from scratch anyway. The &lt;a href=&#34;https://github.com/GeertJohan/openwrt-go/issues/2&#34;&gt;instructions here&lt;/a&gt; and &lt;a href=&#34;http://www.sajalkayan.com/post/golang-openwrt-mips.html&#34;&gt;here&lt;/a&gt; are pretty straightforward and I managed to build the Gnu cross-compile toolchain inside a Fedora 22 VM on Windows 10.&lt;/p&gt;

&lt;p&gt;NOTE: DO NOT DO THE FOLLOWING. IT DIDN&amp;rsquo;T WORK. FOLLOW THE STEPS LATER FOR CLEAN NEW OPENWRT&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:GeertJohan/openwrt-go.git openwrt
cd openwrt
./scripts/feeds update -a
./scripts/feeds install -a
cp ~/Desktop/scons-2.3.5.tar.gz dl (needed to download this manually as it was missing)
cp ~/Desktop/openssl-1.0.2c.tar.gz dl (needed to download this manually as it was missing)
make menuconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In menuconfig you have to enable a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Advanced configuration options&lt;/li&gt;
&lt;li&gt;&amp;ndash;&amp;gt; Toolchain options&lt;/li&gt;
&lt;li&gt;&amp;mdash;&amp;gt; C library implementation&lt;/li&gt;
&lt;li&gt;&amp;mdash;-&amp;gt; Use eglibc&lt;/li&gt;
&lt;li&gt;-&amp;gt; Advanced configuration options&lt;/li&gt;
&lt;li&gt;&amp;ndash;&amp;gt; Toolchain options&lt;/li&gt;
&lt;li&gt;&amp;mdash;&amp;gt; Select Build/Install gccgo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then save and exit, followed by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several hours later on my old i7 laptop, I had everything I needed.&lt;/p&gt;

&lt;p&gt;Then a simple helloworld Web Server helloweb.go that only uses standard library features:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, &amp;quot;Hi there, I love %s!&amp;quot;, r.URL.Path[1:])
}

func main() {
    http.HandleFunc(&amp;quot;/&amp;quot;, handler)
    http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create ~/openwrt.config which consists of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export STAGING_DIR=/home/conor/openwrt/staging_dir 
export TOOLCHAIN_DIR=$STAGING_DIR/toolchain-mips_34kc_gcc-4.8-linaro_glibc-2.19 
export LDCFLAGS=$TOOLCHAIN_DIR/usr/lib 
export LD_LIBRARY_PATH=$TOOLCHAIN_DIR/usr/lib 
export PATH=$TOOLCHAIN_DIR/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then build it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;. ~/openwrt.config
mips_gccgo -Wall -o helloweb_static_libgo helloweb.go -static-libgo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I copied it over to the Onion but no joy. It just kept saying &amp;ldquo;not found&amp;rdquo;. Distant memories told me this was related to libraries and versions but nothing I tried worked. So I took a break.&lt;/p&gt;

&lt;h2 id=&#34;golang-1-1-2-second-successful-attempt:6373a9f13467451d12a87cf58bb7873b&#34;&gt;Golang 1.1.2 second successful attempt&lt;/h2&gt;

&lt;p&gt;A while later I decided that what I needed to do was build OpenWRT for the Onion but then I hit a blocker. Onion support was added to OpenWRT in July but the latest version of the toolchain that included Go was from May. So I bit the bullet and manually &amp;ldquo;cherry-picked&amp;rdquo; &lt;a href=&#34;https://github.com/GeertJohan/openwrt-go/commits/add-gccgo-and-libgo?author=GeertJohan&#34;&gt;all of the author&amp;rsquo;s changes&lt;/a&gt; from the older toolchain into the latest version of OpenWRT.&lt;/p&gt;

&lt;p&gt;You can get &lt;a href=&#34;https://gist.github.com/conoro/887362ebdbbada2cfbc6&#34;&gt;the patchfile I generated here&lt;/a&gt; and apply it.&lt;/p&gt;

&lt;p&gt;NOTE: THESE STEPS WORK OK.&lt;/p&gt;

&lt;p&gt;Now to build from scratch again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dnf install -y subversion binutils bzip2 gcc gcc-c++ gawk gettext flex ncurses-devel zlib-devel zlib-static make patch unzip perl-ExtUtils-MakeMaker glibc glibc-devel glibc-static quilt sed sdcc intltool sharutils bison wget

. ~/openwrt.config   (see the contents of that file in the first failed attempt)

rm -rf ~/openwrt
git clone git://git.openwrt.org/openwrt.git openwrt
cd openwrt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;nano feeds.conf.default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and append the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src-git onion https://github.com/OnionIoT/OpenWRT-Packages.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scripts/feeds update -a

make menuconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note you have to include the same menuconfig settings as before i.e.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Advanced configuration options&lt;/li&gt;
&lt;li&gt;&amp;ndash;&amp;gt; Toolchain options&lt;/li&gt;
&lt;li&gt;&amp;mdash;&amp;gt; C library implementation&lt;/li&gt;
&lt;li&gt;&amp;mdash;-&amp;gt; Use eglibc&lt;/li&gt;
&lt;li&gt;-&amp;gt; Advanced configuration options&lt;/li&gt;
&lt;li&gt;&amp;ndash;&amp;gt; Toolchain options&lt;/li&gt;
&lt;li&gt;&amp;mdash;&amp;gt; Select Build/Install gccgo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plus the following for both the Onion and USB stick. This uses &lt;a href=&#34;https://github.com/OnionIoT/OpenWRT-Packages/wiki/Setting-Up-the-Cross-Compile-Environment&#34;&gt;some instructions from the Onion site&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Target System is Atheros AR7xxx/AR9xxx&lt;/li&gt;
&lt;li&gt;Subtarget is Generic&lt;/li&gt;
&lt;li&gt;Target Profile is Onion Omega&lt;/li&gt;
&lt;li&gt;Target Images is squashfs&lt;/li&gt;
&lt;li&gt;Add kmod-fs-vfat&lt;/li&gt;
&lt;li&gt;Add kmod-nls-cp437&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several hours later again, I finally had &lt;a href=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin&#34;&gt;a version of the firmware that included Go support&lt;/a&gt; and ran on the Onion by doing the following on the Onion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
scp conor@192.168.0.9:/mnt/disk2/software/openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin .
sysupgrade openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hello-world-web-server-in-go-on-the-onion-omega:6373a9f13467451d12a87cf58bb7873b&#34;&gt;Hello World Web Server in Go on the Onion Omega&lt;/h2&gt;

&lt;p&gt;Back to helloworld on the Fedora 22 VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias mips_gccgo=&#39;mips-openwrt-linux-gccgo -Wl,-R,/home/conor/openwrt/staging_dir/toolchain-mips_34kc_gcc-4.8-linaro_glibc-2.19/lib/gcc/mips-openwrt-linux-gnu/4.8.3 -L /home/conor/openwrt/staging_dir/toolchain-mips_34kc_gcc-4.8.0-linaro_glibc-2.19/lib&#39;

mips_gccgo -Wall -o helloweb_static_libgo helloweb.go -static-libgo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy to the Onion and run it with a simple ./helloweb_static_libgo&lt;/p&gt;

&lt;p&gt;Hurrah, Hello World in Go on the Onion!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/go_on_onion_omega_02.jpg&#34; alt=&#34;I love mac and cheese&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;tweeting-from-the-onion-omega-in-go:6373a9f13467451d12a87cf58bb7873b&#34;&gt;Tweeting from the Onion Omega in Go&lt;/h2&gt;

&lt;p&gt;I should have left it at that but no, I wanted to Tweet from the Onion. My problems multiplied. Basically, gccgo doesn&amp;rsquo;t have all the bells and whistles of recent Go and can&amp;rsquo;t handle included packages easily. After some reading and playing, I managed to build a Tweeting App that used the &lt;a href=&#34;https://github.com/kurrik/twittergo&#34;&gt;Twittergo package&lt;/a&gt;. Note you need a local Fedora version of &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go installed and configured&lt;/a&gt; for &amp;ldquo;go get&amp;rdquo; to work (or just git clone). My $GOPATH is /home/conor/gitwork/go&lt;/p&gt;

&lt;p&gt;I used the &lt;a href=&#34;https://github.com/kurrik/twittergo-examples/blob/master/tweet/main.go&#34;&gt;example from Twittergo&lt;/a&gt; to send the tweet, with the same mods to remove paths from the imports as the other files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;. ~/openwrt.config

cd ~/gitwork/go/src/github.com
go get github.com/kurrik/twittergo
go get github.com/kurrik/oauth1a
go get github.com/kurrik/json
cd kurrik/json
mips-openwrt-linux-gccgo -c json.go
cd ../oauth1a
mips-openwrt-linux-gccgo -c oauth1a.go userconfig.go
cd ../twittergo
cp ../json/json.o .
cp ../oauth1a/oauth1a.o .
emacs twittergo.go  (change github.com/kurrik/oauth1a to oauth1a)
emacs models.go  (change github.com/kurrik/json to json)
mips-openwrt-linux-gccgo -c twittergo.go models.go
emacs tweetomega.go
mips_gccgo -Wall -o tweetomega main.go -static-libgo json.o  oauth1a.o twittergo.o
gedit CREDENTIALS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was nearly there. The code ran but threw an error almost immediately about x509 root certs being missing. I ran all of the following, which seemed to fix it (but I&amp;rsquo;m not sure if all needed):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opkg update
opkg install ca-certificates
opkg install openssl-util
opkg install curl
wget http://curl.haxx.se/ca/cacert.pem
mv cacert.pem /etc/ssl/certs/ca-certificates.crt
scp conor@192.168.0.9:/mnt/disk2/software/CREDENTIALS .
scp conor@192.168.0.9:/mnt/disk2/software/tweetomega .
./tweetomega
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally ta-daaaa, a Tweet from the Omega:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/hushvine_onion_01.jpg&#34; alt=&#34;Tweetin Omega&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I now suspect that the Node.js error may have been exactly the same thing but just hidden so I&amp;rsquo;ll go back and try the same for it.&lt;/p&gt;

&lt;h2 id=&#34;final-notes:6373a9f13467451d12a87cf58bb7873b&#34;&gt;Final notes&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;That custom firmware I built is missing all of the Onion&amp;rsquo;s own stuff and I&amp;rsquo;m not sure how to add that. However you can easily re-install the latest factory Onion image by wgetting it using the URL you find &lt;a href=&#34;http://cloud.onion.io/api/firmware/stable.json&#34;&gt;in this file&lt;/a&gt; into /tmp using sysupgrade name_of_image.&lt;/li&gt;
&lt;li&gt;We really need Go 1.6 to support MIPS. I think the Onion is a great device for running Go. We might even get &lt;a href=&#34;http://gobot.io/&#34;&gt;Gobots&lt;/a&gt; running.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>All the gory tech behind our Halloween Hallway of Horror</title>
      <link>http://conoroneill.net/all-the-tech-behind-our-halloween-hallway-of-horror/</link>
      <pubDate>Tue, 03 Nov 2015 08:22:29 +0000</pubDate>
      
      <guid>http://conoroneill.net/all-the-tech-behind-our-halloween-hallway-of-horror/</guid>
      <description>

&lt;p&gt;Despite starting weeks earlier than usual, Halloween still involved a day of last minute panic to bring everything together. The end result was this:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/FClhSNwFfT0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The basic setup was an update of ideas from previous years and consisted of the following.&lt;/p&gt;

&lt;h2 id=&#34;3d-printed-mummy-in-coffin-doorbell:308bcb7036a2d3eb810a4711be2b8022&#34;&gt;3D-printed Mummy in Coffin Doorbell&lt;/h2&gt;

&lt;p&gt;This was my favourite aspect of the whole thing. I spotted a &lt;a href=&#34;http://www.thingiverse.com/thing:32905&#34;&gt;cool 3D design on Thingiverse&lt;/a&gt; and realised I could turn it into a doorbell by dremeling a hole in the back and hot-glueing the mummy to a simple push button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/mummy01b.jpg&#34; alt=&#34;Mummy Doorbell 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In fact the button was one I originally bought in 2012 when I got back into electronics. There was a small bug in my debounce code which I discovered too late and meant that kids had to press the button twice. But overall only a few failed to figure it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/mummy02b.jpg&#34; alt=&#34;Mummy Doorbell 2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;adafruit-audio-breakout-board-and-amp-with-speakers:308bcb7036a2d3eb810a4711be2b8022&#34;&gt;Adafruit Audio breakout board and amp with speakers&lt;/h2&gt;

&lt;p&gt;I had intended everything to be Arduino and ESP8266 (running Arduino code) only so I needed some way of playing the scream. In previous years &lt;a href=&#34;http://conoroneill.net/the-raspberrypi-doorbell-of-dooooooooommmmmmmm/&#34;&gt;I used a Raspberry Pi&lt;/a&gt; (successfully) and &lt;a href=&#34;http://conoroneill.net/a-tech-halloween-mainly-made-of-fail/&#34;&gt;a really crappy device&lt;/a&gt; (less successfully).&lt;/p&gt;

&lt;p&gt;In a bizarre twist to the &lt;a href=&#34;https://www.indiegogo.com/projects/be-maker-kit-plus-free-lessons-on-electronics-from-zero-to-internet-of-things&#34;&gt;BE Maker Kit Indiegogo scam&lt;/a&gt;, one of the people involved somehow got a Florida company to provide free electronics to the right amount. I used this to buy the &lt;a href=&#34;http://www.adafruit.com/products/1381&#34;&gt;Adafruit VS1053 Audio board&lt;/a&gt; and &lt;a href=&#34;https://www.adafruit.com/products/987&#34;&gt;Adafruit MAX98306 Audio Amp&lt;/a&gt;. The wiring on this looks complicated but it&amp;rsquo;s straight out of their tutorial.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/vs1053.jpg&#34; alt=&#34;Scary Sounds&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Audio was courtesy of &lt;a href=&#34;https://rg3.github.io/youtube-dl/&#34;&gt;youtube-dl&lt;/a&gt; and &lt;a href=&#34;http://winff.org/html_new/&#34;&gt;WinFF&lt;/a&gt; on &lt;a href=&#34;https://www.youtube.com/watch?v=BFqHyCoypfM&#34;&gt;this clip from YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Arduino Nano for this was the &amp;ldquo;Master&amp;rdquo; device. It detected the doorbell press and then started playing the file on the SD card and sent a high signal both to the Banana Pi for the LED strip and the Arduino Uno for the relays controlling the skull. It&amp;rsquo;s basically the Adafruit demo VS1053 code with a few extra lines added by me. The code for that &lt;a href=&#34;https://gist.github.com/conoro/58a028f7399b4e50619e&#34;&gt;is here on Gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;wifi-controlled-rgb-led-strip-using-a-banana-pi:308bcb7036a2d3eb810a4711be2b8022&#34;&gt;Wifi Controlled RGB LED Strip using a Banana Pi&lt;/h2&gt;

&lt;p&gt;I finally ordered a bog-standard &lt;a href=&#34;http://eud.dx.com/product/waterproof-72w-4300lm-300-5050-smd-led-rgb-light-flexible-strip-w-44-key-controller-844233947&#34;&gt;5 metre 5050 RGB LED strip from dx.com&lt;/a&gt; over the summer. The value on these things is just staggering at less than €20.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/sku_233947_1.jpg&#34; alt=&#34;RGB LED&#34; /&gt;&lt;/p&gt;

&lt;p&gt;They come with a dedicated remote control and just need a decent PSU to provide the power. Myself and the kids had great fun illuminating my entire home office in a range of colours.&lt;/p&gt;

&lt;p&gt;But the challenge for Halloween was how to control it. I could have run &lt;a href=&#34;http://www.lirc.org/html/irrecord.html&#34;&gt;irrecord&lt;/a&gt; on an &lt;a href=&#34;http://www.hardkernel.com/main/products/prdt_info.php?g_code=G141578608433&#34;&gt;ODROID C1&lt;/a&gt; or &lt;a href=&#34;http://www.bananapi.org/p/product.html&#34;&gt;Banana Pi&lt;/a&gt; to reverse engineer the remote control protocol and then use &lt;a href=&#34;http://eud.dx.com/product/38khz-ir-infrared-transmitter-module-for-arduino-844135040&#34;&gt;the RC transmitter&lt;/a&gt; I bought on DX. But luckily someone &lt;a href=&#34;http://hackaday.com/2015/08/25/esp8266-in-commercial-products/&#34;&gt;told Hackaday about the first ESP8266-powered commercial product&lt;/a&gt; they had found. It was a &lt;a href=&#34;http://es.aliexpress.com/item/rgb-strip-WiFi-controller-1-port-control-15-rgb-lights-communicate-with-Android-phone-to-dim/32301423622.html&#34;&gt;€9 Wifi H801 control module&lt;/a&gt; for RGB LED strips! I just had to get one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/Rgbww-tira-llevada-regulador-wifi-1-port-control-200-luces-comunicar-con-tel%C3%A9fono-Android-a-trav%C3%A9s.jpg_350x350.jpg&#34; alt=&#34;Wifi RGB LED&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a brilliant little box that is easy to wire up and has a simple Android App for control. You connect to the internal Wifi Access Point it provides to do this. Here is the brilliant piece: You then use the app to tell the module to connect to your own Wifi router and then you do the same with the phone. Now your RGB LED strip is on your network!&lt;/p&gt;

&lt;p&gt;But it gets better. A very smart person &lt;a href=&#34;https://www.domoticz.com/forum/viewtopic.php?f=38&amp;amp;t=7957&#34;&gt;reverse-engineered the basic over-the-air protocol&lt;/a&gt; that the app uses to control the Wifi module. Unfortunately he was using a slightly different module to me and it didn&amp;rsquo;t work. I then spent a week of evenings learning all about &lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Netcat&#34;&gt;Netcat&lt;/a&gt;. I was able to do the same as him and find the basic UDP control protocol (only minor difference in the packets)&lt;/p&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OFF: \xfb\xeb\x00\x00\x00\x00\x00\x9f\x97\x9d\x00&lt;/li&gt;
&lt;li&gt;RED: \xfb\xeb\xff\x00\x00\x00\x00\x9f\x97\x9d\x00&lt;/li&gt;
&lt;li&gt;GREEN: \xfb\xeb\x00\xff\x00\x00\x00\x9f\x97\x9d\x00&lt;/li&gt;
&lt;li&gt;BLUE: \xfb\xeb\x00\x00\xff\x00\x00\x9f\x97\x9d\x00&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My plan was to use a &lt;a href=&#34;http://nodemcu.com/index_en.html&#34;&gt;NodeMCU ESP8266 module&lt;/a&gt; to send the relevant commands, using either NodeMCU LUA or the &lt;a href=&#34;https://github.com/esp8266/Arduino&#34;&gt;Arduino port to ESP8266&lt;/a&gt; but I ran out of time to experiment.&lt;/p&gt;

&lt;p&gt;So I had Netcat working happily on the Banana Pi running Fedora but I also needed to be able to use the GPIO pins to tell the BPi when to turn on/off the LED strip. I then made the classic mistake of panicking on Halloween morning and switching to the RaspberryPi so I could use &lt;a href=&#34;http://wiringpi.com/&#34;&gt;WiringPi&lt;/a&gt; for GPIO. Except the Netcat commands hung on the RPi (still no idea why).&lt;/p&gt;

&lt;p&gt;Some Googling revealed that WiringPi had been &lt;a href=&#34;https://github.com/LeMaker/WiringBP&#34;&gt;ported to Raspbian on the BPi&lt;/a&gt; so I tried that. Same Netcat problem! So I took a chance and re-inserted the Fedora SD card and downloaded the BPi version of WiringPi. Result! It compiled and ran perfectly.&lt;/p&gt;

&lt;p&gt;The I moved on to several hours of trying to write a Bash script to monitor a GPIO pin using WiringPi and control the RGB LED strip with echo/netcat. All I will say about that is I am never ever writing a Bash script again (space-sensitive around brackets/equals for the love of god). This is the final result and, to be fair, it worked seamlessly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
#!/bin/bash
sets=`/usr/local/bin/gpio mode 7 down`
setit=$sets
state=&amp;quot;low&amp;quot;
echo -e &#39;\xfb\xeb\x00\x00\x00\x00\x00\x9f\x97\x9d\x00&#39; | nc -v -u 192.168.0.128 30977
sleep 1
while :
do
    pins=`/usr/local/bin/gpio read 7`
    if [ $pins = &amp;quot;1&amp;quot; ]; then
        if [ $state = &amp;quot;low&amp;quot; ]; then
            echo -e &#39;\xfb\xeb\xff\x00\x00\x00\x00\x9f\x97\x9d\x00&#39; | nc -v -u 192.168.0.128 30977
            state=&amp;quot;high&amp;quot;
            echo high 
        fi
    else
        if [ $state = &amp;quot;high&amp;quot; ]; then
           echo -e &#39;\xfb\xeb\x00\x00\x00\x00\x00\x9f\x97\x9d\x00&#39; | nc -v -u 192.168.0.128 30977
           state=&amp;quot;low&amp;quot;
           echo low
        fi
    fi
done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I was so horrified by Bash, I did a quick and dirty re-write &lt;a href=&#34;https://gist.github.com/conoro/935e0fa3acc90d066b9a&#34;&gt;to Go this morning&lt;/a&gt;. It uses the &lt;a href=&#34;https://github.com/hugozhu/rpi&#34;&gt;Golang bindings to WiringPi&lt;/a&gt; and seems to work very well.&lt;/p&gt;

&lt;p&gt;So the strip was now sorted. On to the rotating skull.&lt;/p&gt;

&lt;h2 id=&#34;an-anatomically-correct-skull-with-scary-eyes:308bcb7036a2d3eb810a4711be2b8022&#34;&gt;An anatomically correct skull with scary eyes&lt;/h2&gt;

&lt;p&gt;The skull idea came from a wonderful &lt;a href=&#34;http://www.tested.com/art/makers/530668-how-make-realistic-horror-skull-prop/&#34;&gt;tested.com video&lt;/a&gt; where special effects artist Frank Ippolito bought a cheap skull on Amazon and then used latex, cotton wool and paint to turn it into a horrific burn-victim thing.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/v8w4hufoujg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I thought we could do the same and found a skull on Amazon UK. It arrived and looked great apart from the lack of a movable jaw. But it then sat there for months with no progress due to me being artistically challenged.&lt;/p&gt;

&lt;p&gt;As an alternative I thought about doing something with eyes so I got some half-eyes from Amazon too They were a smidge small but fit for purpose. I grabbed some of my old tiny micro-servos which I have never found a use for and hot-glued the eyes to them. A bit of messing with the range of movement and I had a vaguely spooky setup.&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EagDgNoEpTc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;But the fact that you could see the servos and they move pretty slowly meant I was a bit disappointed. I tried to vamp them up a bit more by adding neopixel ring but it was too big so I switched to a single funky Adafruit RGB neopixel on each one. So now I had 6 wires coming out of each eye.&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/30LBjo5oG3I&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Finally on Saturday morning I went to finish this bit and decided it was too much work to get the Arduino code tweaked to do 2x Neopixels and 2x servos and somehow trigger them on/off on a potentially rotating head. At this point I found the silly fake-eye pingpong balls from last year. A quick cut in the back and I hot-glued a Neopixel to each one. I then hot-glued the eyes into the skull and wired the Neopixels to an Arduino Nano.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/skull_top.jpg&#34; alt=&#34;Skull Arduino&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I stuck the Nano and a Lipo battery to the top of the skull and covered it with a cool Buff. Having the eyes on permanently removed a little bit of the element of surprise but I still thought it worked well. The code for the Neopixels was just the &lt;a href=&#34;https://github.com/adafruit/Adafruit_NeoPixel/blob/master/examples/strandtest/strandtest.ino&#34;&gt;standard Adafruit strand test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/buff_skull.jpg&#34; alt=&#34;Buff Skull&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;making-the-skull-rotate:308bcb7036a2d3eb810a4711be2b8022&#34;&gt;Making the skull rotate&lt;/h2&gt;

&lt;p&gt;I had always known I would rotate the skull in some fashion but for a while I wasn&amp;rsquo;t sure how. Quite a few weeks ago I came up with the idea to cement a hex driver into the bottom of the skull and sit it on top of a cheap crap €20 electric screwdriver I got ages ago from Woodies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/screwdriver1.jpg&#34; alt=&#34;Screwdriver1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As a screwdriver it was rubbish due to slowness and lack of torque. As a skull-rotator it was awesome, spinning the skull around at high speed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/screwdriver2.jpg&#34; alt=&#34;Screwdriver2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Of course I left the difficult bits until a week before Halloween when I sat down and tried to figure out how to control it all. The first attempt was with a dirt cheap double relay board I got 3 years ago and never used. But I couldn&amp;rsquo;t figure out how to make it go forwards and reverse. I then tried an old knock-off Adafruit Motor Shield but it couldn&amp;rsquo;t deliver enough juice (even with a 7.2V LiPo) to overcome the motor&amp;rsquo;s inertia. Finally I &lt;a href=&#34;http://arduino-info.wikispaces.com/ArduinoPower&#34;&gt;found a relay circuit&lt;/a&gt; that did forward/reverse and it worked like a charm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/DC_Motor_2SPDT_Relay-450.jpg&#34; alt=&#34;Circuit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/relay2.jpg&#34; alt=&#34;Relay&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But how was I going to handle starting/stopping the skull so it was facing away (and potentially covered) initially and then rotating at the right time and stopping in the right position? Of course I left that to Halloween itself.&lt;/p&gt;

&lt;p&gt;I used polystyrene and duct tape to brace the screwdriver. Then I setup two limit switches. I then applied power. The head spun around and ripped the switches off their mounts. Damn. So another quick executive decision was made. The head would start rotating when the doorbell was pressed and then stop after 10-15 seconds. Which meant some kids would get the full scary effect whilst others would see the flashing eyes before they got to the door.&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/_alMNaewNXw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;tying-it-all-together:308bcb7036a2d3eb810a4711be2b8022&#34;&gt;Tying it all together&lt;/h2&gt;

&lt;p&gt;This turned out to be pretty easy. I have a ton of decent wire from a dead Christmas tree light string and used that to connect everything up. The doorbell connected to one Arudino which then toggled a pin which the other Arduinos were connected to. After N seconds, it toggled the pin the other way to shut it all down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/11/wiring.jpg&#34; alt=&#34;Wiring&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It worked very very well.&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/JvAI6WQglpk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;next-year:308bcb7036a2d3eb810a4711be2b8022&#34;&gt;Next year?&lt;/h2&gt;

&lt;p&gt;Hmm not sure. I wanted to do something with ghosts flying down zip wires a few years ago but I just didn&amp;rsquo;t have the knowhow. I&amp;rsquo;m feeling a lot more confident about that now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facebook is the Amazon AWS Killer</title>
      <link>http://conoroneill.net/facebook-is-the-amazon-killer/</link>
      <pubDate>Fri, 23 Oct 2015 13:54:25 +0100</pubDate>
      
      <guid>http://conoroneill.net/facebook-is-the-amazon-killer/</guid>
      <description>&lt;p&gt;AWS is now an $8Bn business for Amazon. Could anyone have predicted that in 1997 or even 2007? This week I was talking to a few people about who might be able to disrupt AWS. It won&amp;rsquo;t be easy. We immediately discounted the old guys like HP, IBM, Dell etc and even Google seems to be a complete also-ran in IaaS. Microsoft Azure might have potential.&lt;/p&gt;

&lt;p&gt;PaaS is separate as it&amp;rsquo;s higher up the stack and makes use of IaaS. I expect Open Source PaaS like &lt;a href=&#34;http://www.openshift.com/&#34;&gt;OpenShift 3&lt;/a&gt; to grow very quickly in the coming years as it makes deployment and management of Apps incredibly easy. Where PaaS might hurt AWS is in abstracting what IaaS you are using, so as long as the feature set is there, you don&amp;rsquo;t care where your Apps are running (apart from Geo lag and data protection laws).&lt;/p&gt;

&lt;p&gt;One of the people I talked to thinks that AWS will be slayed by a startup who may not even exist yet. He also felt that smart VPSes like &lt;a href=&#34;http://www.digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt; might do it. I&amp;rsquo;m a huge fan of DO and gained enormous reliability and speed by switching to it from Google Compute Engine/CloudSQL whilst reducing my bill by 2/3rds. But it still feels like an SME/SMB or individual developer solution.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m predicting it&amp;rsquo;ll be Facebook. Why? Think about the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They understand building things at massive scale on a global basis&lt;/li&gt;
&lt;li&gt;They build their &lt;a href=&#34;http://www.thejournal.ie/facebook-building-data-centre-in-meath-2161944-Jun2015/&#34;&gt;own datacenters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;They built the &lt;a href=&#34;http://www.theguardian.com/technology/2015/sep/25/facebook-datacentre-lulea-sweden-node-pole&#34;&gt;most energy efficient computing facility&lt;/a&gt; ever&lt;/li&gt;
&lt;li&gt;They created the &lt;a href=&#34;http://www.opencompute.org/&#34;&gt;Open Compute&lt;/a&gt; project&lt;/li&gt;
&lt;li&gt;They have incubated some &lt;a href=&#34;https://github.com/facebook&#34;&gt;incredible Open Source projects&lt;/a&gt; like &lt;a href=&#34;http://cassandra.apache.org/&#34;&gt;Cassandra&lt;/a&gt; and &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;They use PHP. Forget I mentioned that ;-)&lt;/li&gt;
&lt;li&gt;They understand that &lt;a href=&#34;http://ben-evans.com/benedictevans/2015/6/19/presentation-mobile-is-eating-the-world&#34;&gt;mobile is eating the world&lt;/a&gt; and they own &lt;a href=&#34;https://parse.com/&#34;&gt;Parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;They understand real-time messaging &lt;a href=&#34;https://www.whatsapp.com/&#34;&gt;at massive scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;They could do this in their sleep&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big open question is how they do their virtualisation and containerisation. If they have that nailed, then I think they might go for it.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s re-visit this post in 5 years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running the latest Chromium 45 on Debian Jessie on your Raspberry Pi 2</title>
      <link>http://conoroneill.net/running-the-latest-chromium-45-on-debian-jessie-on-your-raspberry-pi-2/</link>
      <pubDate>Tue, 29 Sep 2015 17:35:11 +0100</pubDate>
      
      <guid>http://conoroneill.net/running-the-latest-chromium-45-on-debian-jessie-on-your-raspberry-pi-2/</guid>
      <description>&lt;p&gt;For some odd reason, Google and others stopped auto-generating armhf binaries of &lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;Chromium&lt;/a&gt; last year. Version 37 was the last one I could find. Luckily the Ubuntu guys have been building it all along and their version 45 installs really easily on the &lt;a href=&#34;https://www.raspberrypi.org/blog/raspbian-jessie-is-here/&#34;&gt;all-new Debian/Raspbian Jessie&lt;/a&gt; on your Raspberry Pi 2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/09/pi_heart_chrome.png&#34; alt=&#34;Pi loves Chromium&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This was a surprise as this kind of thing usually degenerates into dependency hell.&lt;/p&gt;

&lt;p&gt;Here you go (updatred to mention libgcrypt):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://ftp.us.debian.org/debian/pool/main/libg/libgcrypt11/libgcrypt11_1.5.0-5+deb7u3_armhf.deb
wget http://launchpadlibrarian.net/218525709/chromium-browser_45.0.2454.85-0ubuntu0.14.04.1.1097_armhf.deb
wget http://launchpadlibrarian.net/218525711/chromium-codecs-ffmpeg-extra_45.0.2454.85-0ubuntu0.14.04.1.1097_armhf.deb
sudo dpkg -i libgcrypt11_1.5.0-5+deb7u3_armhf.deb
sudo dpkg -i chromium-codecs-ffmpeg-extra_45.0.2454.85-0ubuntu0.14.04.1.1097_armhf.deb
sudo dpkg -i chromium-browser_45.0.2454.85-0ubuntu0.14.04.1.1097_armhf.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It even appears correctly in your desktop menus!&lt;/p&gt;

&lt;p&gt;Note: Some users reporting issues in comments that I&amp;rsquo;m not seeing.&lt;/p&gt;

&lt;p&gt;Apart from security fixes and the latest Chromium features, you also get full access to most of the Apps and Extensions in the Chrome Web Store. This includes the &lt;a href=&#34;http://www.espruino.com/Order#distributors&#34;&gt;Espruino&lt;/a&gt; Chrome &lt;a href=&#34;https://chrome.google.com/webstore/detail/espruino-web-ide/bleoifhkdalbjfbobjackfdifdneehpo&#34;&gt;App&lt;/a&gt;, which means you or your kids now have everything you need to develop and deploy Embedded and IoT projects for under €100. Honestly, that&amp;rsquo;s revolutionary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/09/pi_plus_espruino_small.jpg&#34; alt=&#34;Pi loves Espruino&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TingoDB and SQLite instead of MongoDB and MySQL for tiny projects or Raspberry Pi</title>
      <link>http://conoroneill.net/tingodb-and-sqlite-instead-of-mongodb-and-mysql-for-tiny-projects-or-raspberry-pi/</link>
      <pubDate>Sun, 20 Sep 2015 13:03:54 +0100</pubDate>
      
      <guid>http://conoroneill.net/tingodb-and-sqlite-instead-of-mongodb-and-mysql-for-tiny-projects-or-raspberry-pi/</guid>
      <description>

&lt;p&gt;As an old Embedded guy who actually cares about resource usage, I&amp;rsquo;ve been bothered for quite a while by the number of trivial Node.js projects out there that require a full-blown MongoDB or MySQL server to operate. It&amp;rsquo;s a particular problem on the Raspberry Pi or small &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; Droplets. In many cases a simple SQLite DB or TingoDB is more than sufficient.&lt;/p&gt;

&lt;p&gt;If your Web App has 2 registered users and 100 visitors per day, may just maybe you don&amp;rsquo;t need MongoDB or MySQL. I have a set of small Node.js projects now where I use the following combinations and they all work well. Anything you are doing in-house on a Raspberry Pi should absolutely use one of these. In fact I&amp;rsquo;m not even sure recent Mongos run on the RPi 1?&lt;/p&gt;

&lt;h2 id=&#34;dulcimer-levelup-and-leveldb:b9c1e366c3521fb5cdf8cf868ebc63d4&#34;&gt;Dulcimer, LevelUP and LevelDB&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;LevelDB&lt;/a&gt; and &lt;a href=&#34;https://github.com/Level/levelup&#34;&gt;LevelUP&lt;/a&gt; are well known and widely used. I think &lt;a href=&#34;https://github.com/fritzy/Dulcimer&#34;&gt;Dulcimer&lt;/a&gt; probably less so. It&amp;rsquo;s a &lt;a href=&#34;http://mongoosejs.com/&#34;&gt;Mongoose-ish&lt;/a&gt; ORM for LevelDB. I was able to tie it into &lt;a href=&#34;http://passportjs.org/&#34;&gt;PassportJS&lt;/a&gt; without much effort to handle users/sessions/etc. I have two setups using it and both have been running for many months on d&amp;rsquo;internet with zero problems. In one case it&amp;rsquo;s a small stats dashboard running on DigitalOcean with a few registered users who check it maybe once a day. The other one is a registration system for people requesting access to some internal work resources. All submissions go into LevelDB. This is running on &lt;a href=&#34;https://www.openshift.com/products/online&#34;&gt;OpenShift Online&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tingodb-and-tungus:b9c1e366c3521fb5cdf8cf868ebc63d4&#34;&gt;TingoDB and Tungus&lt;/h2&gt;

&lt;p&gt;Of the NoSQL file-based databases, this seems to have the lowest profile and I think it deserves a &lt;em&gt;lot&lt;/em&gt; of attention. &lt;a href=&#34;https://github.com/sergeyksv/tingodb&#34;&gt;TingoDB&lt;/a&gt; emulates most of the common MongoDB APIs and &lt;a href=&#34;https://github.com/sergeyksv/tungus&#34;&gt;Tungus&lt;/a&gt; emulates most of the Mongoose ones. I was able to take a &lt;a href=&#34;https://github.com/sahat/tvshow-tracker&#34;&gt;random Node.js project&lt;/a&gt; off GitHub which is based on MongoDB/Mongoose/Mongoskin and get it running using TingoDB/Tungus on an RPi with only a tiny bit of fiddling with the &lt;a href=&#34;https://github.com/rschmukler/agenda/&#34;&gt;Agenda&lt;/a&gt; module. This is huge for those wanting to do NoSQL on Raspberry Pi. I&amp;rsquo;ll be playing a lot more with this setup in the coming weeks. You really should too.&lt;/p&gt;

&lt;h2 id=&#34;sqlite-knex-and-bookshelf:b9c1e366c3521fb5cdf8cf868ebc63d4&#34;&gt;SQLite, Knex and Bookshelf&lt;/h2&gt;

&lt;p&gt;Whilst the whole hipster dev world thinks NoSQL is the answer to everything, good old relational databases just keep on trucking. I&amp;rsquo;ve used &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; many times over the years for simple projects and it has always worked well. I hadn&amp;rsquo;t realised until recently that the main SQL ORMs on Node.js support it out of the box. So again, if you have a project that needs a relational DB and doesn&amp;rsquo;t need huge scale, you should be looking at SQLite. I&amp;rsquo;m currently wrapping up a simple in-house project using SQLite with &lt;a href=&#34;http://knexjs.org/&#34;&gt;Knex&lt;/a&gt; and &lt;a href=&#34;http://bookshelfjs.org/&#34;&gt;Bookshelf&lt;/a&gt; on a Raspberry Pi. The DB hold simple relationships between devices and their status.&lt;/p&gt;

&lt;p&gt;The latter two setups above also have the big advantage that you can use them in development or in the early production stages and then you can drop in MongoDB or MySQL at a later stage if needed, without any re-coding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running ZeroMQ with Node.js on Raspberry Pi</title>
      <link>http://conoroneill.net/running-zeromq-with-node-js-on-raspberry-pi/</link>
      <pubDate>Sun, 20 Sep 2015 11:38:46 +0100</pubDate>
      
      <guid>http://conoroneill.net/running-zeromq-with-node-js-on-raspberry-pi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://zeromq.org/&#34;&gt;ZeroMQ&lt;/a&gt; is a lightweight messaging library and looks ideal for lower powered devices like the RPi. Building and running is pretty easy. These are really just notes for myself for future reference.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t actually need a messaging system yet but I wanted to play around with one. Running a simple Request / Reply setup with Node.js on both Windows 10 and RPi was interesting. One advantage a message queue gives you over REST is that the receiver can be out of action and still get all transmitted messages when it recovers. You also have things like Pub/Sub etc. I&amp;rsquo;ve been running the code &lt;a href=&#34;http://blog.rastating.com/using-zeromq-with-node-js/&#34;&gt;from here&lt;/a&gt; 100% reliably for two days now on both setups. At some point I&amp;rsquo;ll check max throughput on a Pi.&lt;/p&gt;

&lt;p&gt;Installation on Raspberry Pi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd
sudo apt-get install libtool pkg-config build-essential autoconf automake
mkdir build
cd build/
wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.3.tar.gz
tar -zxvf libsodium-1.0.3.tar.gz
cd libsodium-1.0.3/
./configure
make
sudo make install
cd ..
wget http://download.zeromq.org/zeromq-4.1.3.tar.gz
tar -zxvf zeromq-4.1.3.tar.gz
cd zeromq-4.1.3/
./configure
make
sudo make install
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test code for Request / Reply &lt;a href=&#34;http://blog.rastating.com/using-zeromq-with-node-js/&#34;&gt;from here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;server.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var zmq = require(&amp;quot;zmq&amp;quot;);  
var socket = zmq.socket(&amp;quot;req&amp;quot;);  
var counter = 0;

// Just a helper function for logging to the console with a timestamp.
function logToConsole (message) {  
    console.log(&amp;quot;[&amp;quot; + new Date().toLocaleTimeString() + &amp;quot;] &amp;quot; + message);
}

function sendMessage (message) {  
    logToConsole(&amp;quot;Sending: &amp;quot; + message);
    socket.send(message);
}

// Add a callback for the event that is invoked when we receive a message.
socket.on(&amp;quot;message&amp;quot;, function (message) {  
    // Convert the message into a string and log to the console.
    logToConsole(&amp;quot;Response: &amp;quot; + message.toString(&amp;quot;utf8&amp;quot;));
});

// Begin listening for connections on all IP addresses on port 9998.
socket.bind(&amp;quot;tcp://*:9998&amp;quot;, function (error) {  
    if (error) {
        logToConsole(&amp;quot;Failed to bind socket: &amp;quot; + error.message);
        process.exit(0);
    }
    else {
        logToConsole(&amp;quot;Server listening on port 9998&amp;quot;);

        // Increment the counter and send the value to the clients every second.
        setInterval(function () { sendMessage(counter++); }, 1000);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;client.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var zmq = require(&amp;quot;zmq&amp;quot;);  
var socket = zmq.socket(&amp;quot;rep&amp;quot;);

// Just a helper function for logging to the console with a timestamp.
function logToConsole (message) {  
    console.log(&amp;quot;[&amp;quot; + new Date().toLocaleTimeString() + &amp;quot;] &amp;quot; + message);
}

// Add a callback for the event that is invoked when we receive a message.
socket.on(&amp;quot;message&amp;quot;, function (message) {  
    // Convert the message into a string and log to the console.
    logToConsole(&amp;quot;Received message: &amp;quot; + message.toString(&amp;quot;utf8&amp;quot;));

    // Send the message back aa a reply to the server.
    socket.send(message);
});

// Connect to the server instance.
socket.connect(&#39;tcp://127.0.0.1:9998&#39;);  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TIL you can import 3D models from Tinkercad to Minecraft. How cool is that?</title>
      <link>http://conoroneill.net/til-you-can-import-3d-models-from-tinkercad-to-minecraft-how-cool-is-that/</link>
      <pubDate>Sun, 23 Aug 2015 14:42:32 +0100</pubDate>
      
      <guid>http://conoroneill.net/til-you-can-import-3d-models-from-tinkercad-to-minecraft-how-cool-is-that/</guid>
      <description>&lt;p&gt;We had friends over from the US last weekend and their kids loved my &lt;a href=&#34;http://printrbot.com/project/simple-makers/&#34;&gt;Printrbot 3D printer&lt;/a&gt;. They had learned &lt;a href=&#34;https://www.tinkercad.com/&#34;&gt;Tinkercad&lt;/a&gt; in school so that&amp;rsquo;s what they used to create things so they could print them out. They are now hounding their parents for a printer. Oops :-) But I noticed a &amp;ldquo;Download to Minecraft&amp;rdquo; option in Tinkercad and finally just had a chance to try it out. Wow!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/08/tinker02b.jpg&#34; alt=&#34;In Tinkercad&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.tinkercad.com/2013/08/15/tinkercraft/&#34;&gt;It&amp;rsquo;s incredibly easy&lt;/a&gt;. Take any model from Tinkercad and pick the Minecraft option. You may have to tweak the sizing when you are doing it seriously. Then install the &lt;a href=&#34;http://www.mcedit.net/downloads.html&#34;&gt;MCEdit Minecraft editor&lt;/a&gt; and import the file into one of your worlds. Then load up Minecraft and thar she blows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://conoroneill.net.s3.amazonaws.com/wp-content/uploads/2015/08/tinker01b.jpg&#34; alt=&#34;In Minecraft&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I totally love the intersection of 3D design, 3D printing and Minecraft - the real and the virtual coming together. The younger kids are gonna be psyched when I show em!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>